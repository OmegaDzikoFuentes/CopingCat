// three@0.176.0 downloaded from https://ga.jspm.io/npm:three@0.176.0/build/three.module.js

import{c as n,V as a,C as o,fI as s,a as l,n as c,d,ac as u,K as p,J as _,eZ as g,B as E,fJ as S,g as T,S as b,aL as C,aM as L,fK as U,k as w,a7 as N,a8 as O,au as F,F as B,av as H,Y as G,o as V,Z as z,p as k,H as W,a4 as X,a6 as Y,Q as K,a5 as j,N as Z,a1 as $,a9 as Q,aa as J,fD as te,z as ne,b5 as re,al as ie,am as oe,an as se,b as le,s as ue,ad as pe,u as me,dB as he,X as _e,cb as ge,el as ve,dz as Ee,cI as Se,cH as Te,cG as Me,cF as xe,cE as Re,cD as Ae,aW as be,eB as Ce,aA as Le,_ as Pe,$ as Ue,a0 as we,dS as De,eb as ye,ao as Ie,w as Ne,T as Oe,O as Fe,fL as Be,aU as He,es as Ge,eP as Ve,et as ze,l as ke,br as We,bt as Xe,bp as Ye,bs as Ke,bq as je,bu as qe,bv as Ze,bw as $e,bk as Qe,b7 as Je,b8 as et,aO as tt,cv as nt,cu as at,ez as rt,dp as it,eA as ot,dq as st,b9 as lt,ba as ut,bb as pt,bc as mt,bd as ht,be as _t,bf as gt,bg as vt,bh as Et,bi as St,aP as Tt,aN as Mt,bm as xt,bn as Rt,bo as At,bj as bt,bl as Ct,fM as Lt,U as Pt,at as Ut,b3 as wt,c3 as Dt,c4 as yt,c5 as It,L as Nt,aG as Ot,aH as Ft,c6 as Bt,c7 as Ht,c8 as Gt,c9 as Vt,ca as zt,aB as kt,cc as Wt,cd as Xt,j as Yt,ar as Kt,fN as jt,as as qt,bx as Zt,by as $t,bz as Qt,b2 as Jt,b1 as tn,bA as nn,a$ as an,aY as rn,aX as on,aC as sn,aZ as ln,b0 as un,bB as pn,bC as mn,bD as hn,bE as _n,bF as gn,bG as vn,bH as En,bI as Sn,bJ as Tn,bK as Mn,bL as xn,bM as Rn,bN as An,bO as bn,bP as Cn,bQ as Ln,bR as Pn,bS as Un,bT as wn,bU as Dn,bV as yn,bW as In,bX as Nn,bY as On,bZ as Fn,b_ as Bn,eR as Hn,eS as Gn,b$ as Vn,c0 as zn,c1 as kn,c2 as Wn,E as Xn,aK as Yn,aS as Kn,aT as jn,b6 as qn,G as Zn,aJ as $n,fO as Qn,fP as Jn,fQ as ta,W as na}from"../_/Bvfo3f0f.js";export{cO as AdditiveAnimationBlendMode,ck as AlwaysStencilFunc,cA as AmbientLight,cP as AnimationAction,cQ as AnimationClip,cR as AnimationLoader,cS as AnimationMixer,cT as AnimationObjectGroup,cU as AnimationUtils,cV as ArcCurve,cW as ArrowHelper,cX as AttachedBindMode,cY as Audio,cZ as AudioAnalyser,c_ as AudioContext,c$ as AudioListener,d0 as AudioLoader,d1 as AxesHelper,d2 as BasicDepthPacking,aD as BasicShadowMap,d3 as BatchedMesh,d4 as Bone,d5 as BooleanKeyframeTrack,d6 as Box2,d7 as Box3,d8 as Box3Helper,d9 as BoxHelper,da as BufferGeometryLoader,db as Cache,ap as Camera,dc as CameraHelper,dd as CanvasTexture,de as CapsuleGeometry,df as CatmullRomCurve3,dg as CircleGeometry,dh as Clock,di as ColorKeyframeTrack,dj as CompressedArrayTexture,dk as CompressedCubeTexture,dl as CompressedTexture,dm as CompressedTextureLoader,dn as ConeGeometry,dr as Controls,R as CubeCamera,ds as CubeTextureLoader,dt as CubicBezierCurve,du as CubicBezierCurve3,dv as CubicInterpolant,dw as CullFaceFrontBack,dx as Curve,dy as CurvePath,aQ as CylinderGeometry,dA as Cylindrical,b4 as DataTexture,dC as DataTextureLoader,dD as DataUtils,co as DecrementStencilOp,cm as DecrementWrapStencilOp,dE as DefaultLoadingManager,aq as DepthArrayTexture,dF as DetachedBindMode,cy as DirectionalLight,dG as DirectionalLightHelper,dH as DiscreteInterpolant,dI as DodecahedronGeometry,dJ as DynamicCopyUsage,D as DynamicDrawUsage,dK as DynamicReadUsage,dL as EdgesGeometry,dM as EllipseCurve,ch as EqualStencilFunc,dN as ExtrudeGeometry,cL as FileLoader,aI as Float16BufferAttribute,ay as Float32BufferAttribute,dO as Fog,dP as FogExp2,t as FramebufferTexture,aV as FrustumArray,dQ as GLBufferAttribute,dR as GLSL1,cg as GreaterEqualStencilFunc,cf as GreaterStencilFunc,dT as GridHelper,cJ as Group,cB as HemisphereLight,dU as HemisphereLightHelper,dV as IcosahedronGeometry,dW as ImageBitmapLoader,dX as ImageLoader,dY as ImageUtils,cp as IncrementStencilOp,cn as IncrementWrapStencilOp,r as InstancedBufferAttribute,dZ as InstancedBufferGeometry,q as InstancedInterleavedBuffer,d_ as InstancedMesh,d$ as Int16BufferAttribute,e0 as Int32BufferAttribute,e1 as Int8BufferAttribute,I as InterleavedBuffer,i as InterleavedBufferAttribute,e2 as Interpolant,e3 as InterpolateDiscrete,e4 as InterpolateLinear,e5 as InterpolateSmooth,e6 as InterpolationSamplingMode,e7 as InterpolationSamplingType,cq as InvertStencilOp,ct as KeepStencilOp,e8 as KeyframeTrack,e9 as LOD,ea as LatheGeometry,ci as LessEqualStencilFunc,cj as LessStencilFunc,ec as Light,cC as LightProbe,ed as Line,ee as Line3,x as LineBasicMaterial,ef as LineCurve,eg as LineCurve3,y as LineDashedMaterial,eh as LineLoop,ei as LineSegments,ej as LinearInterpolant,ax as LinearMipMapLinearFilter,ek as LinearMipMapNearestFilter,cK as Loader,em as LoaderUtils,en as LoadingManager,eo as LoopOnce,ep as LoopPingPong,eq as LoopRepeat,er as MOUSE,v as Material,cM as MaterialLoader,e as MathUtils,M as Matrix2,a2 as MeshLambertMaterial,ah as MeshMatcapMaterial,A as MeshNormalMaterial,a3 as MeshPhongMaterial,af as MeshPhysicalMaterial,ae as MeshStandardMaterial,ag as MeshToonMaterial,eu as NearestMipMapLinearFilter,ev as NearestMipMapNearestFilter,cl as NeverStencilFunc,ew as NormalAnimationBlendMode,ce as NotEqualStencilFunc,ex as NumberKeyframeTrack,aw as Object3D,cN as ObjectLoader,ey as OctahedronGeometry,eC as Path,eD as PlaneHelper,cx as PointLight,eE as PointLightHelper,eF as Points,aj as PointsMaterial,eG as PolarGridHelper,eH as PolyhedronGeometry,eI as PositionalAudio,eJ as PropertyBinding,eK as PropertyMixer,eL as QuadraticBezierCurve,eM as QuadraticBezierCurve3,aR as Quaternion,eN as QuaternionKeyframeTrack,eO as QuaternionLinearInterpolant,eQ as RGBDepthPacking,a_ as RGBIntegerFormat,eT as RGDepthPacking,eU as RawShaderMaterial,eV as Ray,eW as Raycaster,cz as RectAreaLight,ab as RenderTarget,eX as RenderTarget3D,aF as RenderTargetArray,cr as ReplaceStencilOp,eY as RingGeometry,P as Scene,ak as ShadowMaterial,e_ as Shape,e$ as ShapeGeometry,f0 as ShapePath,f1 as ShapeUtils,f2 as Skeleton,f3 as SkeletonHelper,f4 as SkinnedMesh,f5 as Source,m as Sphere,aE as SphereGeometry,f6 as Spherical,f7 as SphericalHarmonics3,f8 as SplineCurve,cw as SpotLight,f9 as SpotLightHelper,fa as Sprite,ai as SpriteMaterial,fb as StaticCopyUsage,h as StaticDrawUsage,fc as StaticReadUsage,fd as StereoCamera,fe as StreamCopyUsage,ff as StreamDrawUsage,fg as StreamReadUsage,fh as StringKeyframeTrack,fi as TOUCH,fj as TetrahedronGeometry,fk as TextureLoader,fl as TextureUtils,fm as TimestampQuery,fn as TorusGeometry,fo as TorusKnotGeometry,fp as Triangle,fq as TriangleFanDrawMode,fr as TriangleStripDrawMode,fs as TrianglesDrawMode,ft as TubeGeometry,az as UVMapping,fu as Uint8BufferAttribute,fv as Uint8ClampedBufferAttribute,fw as Uniform,fx as UniformsGroup,fy as VectorKeyframeTrack,fz as VideoFrameTexture,fA as VideoTexture,fB as WebGL3DRenderTarget,fC as WebGLArrayRenderTarget,f as WebGPUCoordinateSystem,fE as WireframeGeometry,fF as WrapAroundEnding,fG as ZeroCurvatureEnding,fH as ZeroSlopeEnding,cs as ZeroStencilOp}from"../_/Bvfo3f0f.js";
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function aa(){let e=null;let t=false;let n=null;let a=null;function r(t,i){n(t,i);a=e.requestAnimationFrame(r)}return{start:function(){if(t!==true&&n!==null){a=e.requestAnimationFrame(r);t=true}},stop:function(){e.cancelAnimationFrame(a);t=false},setAnimationLoop:function(e){n=e},setContext:function(t){e=t}}}function ra(e){const t=new WeakMap;function n(t,n){const a=t.array;const r=t.usage;const i=a.byteLength;const o=e.createBuffer();e.bindBuffer(n,o);e.bufferData(n,a,r);t.onUploadCallback();let s;if(a instanceof Float32Array)s=e.FLOAT;else if(a instanceof Uint16Array)s=t.isFloat16BufferAttribute?e.HALF_FLOAT:e.UNSIGNED_SHORT;else if(a instanceof Int16Array)s=e.SHORT;else if(a instanceof Uint32Array)s=e.UNSIGNED_INT;else if(a instanceof Int32Array)s=e.INT;else if(a instanceof Int8Array)s=e.BYTE;else if(a instanceof Uint8Array)s=e.UNSIGNED_BYTE;else{if(!(a instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+a);s=e.UNSIGNED_BYTE}return{buffer:o,type:s,bytesPerElement:a.BYTES_PER_ELEMENT,version:t.version,size:i}}function a(t,n,a){const r=n.array;const i=n.updateRanges;e.bindBuffer(a,t);if(i.length===0)e.bufferSubData(a,0,r);else{i.sort(((e,t)=>e.start-t.start));let t=0;for(let e=1;e<i.length;e++){const n=i[t];const a=i[e];if(a.start<=n.start+n.count+1)n.count=Math.max(n.count,a.start+a.count-n.start);else{++t;i[t]=a}}i.length=t+1;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.bufferSubData(a,n.start*r.BYTES_PER_ELEMENT,r,n.start,n.count)}n.clearUpdateRanges()}n.onUploadCallback()}function r(e){e.isInterleavedBufferAttribute&&(e=e.data);return t.get(e)}function i(n){n.isInterleavedBufferAttribute&&(n=n.data);const a=t.get(n);if(a){e.deleteBuffer(a.buffer);t.delete(n)}}function o(e,r){e.isInterleavedBufferAttribute&&(e=e.data);if(e.isGLBufferAttribute){const n=t.get(e);(!n||n.version<e.version)&&t.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version});return}const i=t.get(e);if(i===void 0)t.set(e,n(e,r));else if(i.version<e.version){if(i.size!==e.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");a(i.buffer,e,r);i.version=e.version}}return{get:r,remove:i,update:o}}var ia="#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var oa="#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";var sa="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var la="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var ca="#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";var ua="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var pa="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var ma="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var ha="#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif";var _a="#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";var ga="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";var va="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var Ea="float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";var Sa="#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";var Ta="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var Ma="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";var xa="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var Ra="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var Aa="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var ba="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var Ca="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var La="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif";var Pa="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif";var Ua="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var wa="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var Da="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var ya="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var Ia="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var Na="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var Oa="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var Fa="gl_FragColor = linearToOutputTexel( gl_FragColor );";var Ba="vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var Ha="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var Ga="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var Va="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var za="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var ka="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var Wa="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var Xa="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var Ya="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var Ka="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var ja="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";var qa="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var Za="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var $a="varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";var Qa="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var Ja="#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";var tr="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var nr="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";var ar="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var rr="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";var ir="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var or="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var sr="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lr="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var ur="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var pr="#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var mr="#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var hr="#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var _r="#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";var gr="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var vr="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var Er="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var Sr="#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var Tr="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var Mr="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var xr="#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";var Rr="#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";var Ar="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var br="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif";var Cr="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var Lr="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var Pr="#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var Ur="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var wr="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var Dr="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var yr="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";var Ir="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var Nr="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var Or="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";var Fr="#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";var Br="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var Hr="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";var Gr="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var Vr="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var zr="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var kr="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var Wr="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var Xr="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var Yr="#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif";var Kr="#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var jr="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";var qr="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var Zr="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var $r="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";var Qr="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Jr="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var ti="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var ni="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var ri="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var ii="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var oi="#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var si="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";var li="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var ui="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var pi="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var mi="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const hi="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const _i="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const gi="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const vi="#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ei="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const Si="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ti="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const Mi="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}";const xi="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const Ri="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const Ai="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const bi="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Ci="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const Li="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const Pi="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const Ui="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const wi="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Di="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const yi="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const Ii="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Ni="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const Oi="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const Fi="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Bi="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Hi="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const Gi="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const Vi="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const zi="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const ki="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const Wi="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const Xi="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const Yi="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const Ki="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const ji="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const qi={alphahash_fragment:ia,alphahash_pars_fragment:oa,alphamap_fragment:sa,alphamap_pars_fragment:la,alphatest_fragment:ca,alphatest_pars_fragment:ua,aomap_fragment:pa,aomap_pars_fragment:ma,batching_pars_vertex:ha,batching_vertex:_a,begin_vertex:ga,beginnormal_vertex:va,bsdfs:Ea,iridescence_fragment:Sa,bumpmap_pars_fragment:Ta,clipping_planes_fragment:Ma,clipping_planes_pars_fragment:xa,clipping_planes_pars_vertex:Ra,clipping_planes_vertex:Aa,color_fragment:ba,color_pars_fragment:Ca,color_pars_vertex:La,color_vertex:Pa,common:Ua,cube_uv_reflection_fragment:wa,defaultnormal_vertex:Da,displacementmap_pars_vertex:ya,displacementmap_vertex:Ia,emissivemap_fragment:Na,emissivemap_pars_fragment:Oa,colorspace_fragment:Fa,colorspace_pars_fragment:Ba,envmap_fragment:Ha,envmap_common_pars_fragment:Ga,envmap_pars_fragment:Va,envmap_pars_vertex:za,envmap_physical_pars_fragment:Ja,envmap_vertex:ka,fog_vertex:Wa,fog_pars_vertex:Xa,fog_fragment:Ya,fog_pars_fragment:Ka,gradientmap_pars_fragment:ja,lightmap_pars_fragment:qa,lights_lambert_fragment:Za,lights_lambert_pars_fragment:$a,lights_pars_begin:Qa,lights_toon_fragment:tr,lights_toon_pars_fragment:nr,lights_phong_fragment:ar,lights_phong_pars_fragment:rr,lights_physical_fragment:ir,lights_physical_pars_fragment:or,lights_fragment_begin:sr,lights_fragment_maps:lr,lights_fragment_end:ur,logdepthbuf_fragment:pr,logdepthbuf_pars_fragment:mr,logdepthbuf_pars_vertex:hr,logdepthbuf_vertex:_r,map_fragment:gr,map_pars_fragment:vr,map_particle_fragment:Er,map_particle_pars_fragment:Sr,metalnessmap_fragment:Tr,metalnessmap_pars_fragment:Mr,morphinstance_vertex:xr,morphcolor_vertex:Rr,morphnormal_vertex:Ar,morphtarget_pars_vertex:br,morphtarget_vertex:Cr,normal_fragment_begin:Lr,normal_fragment_maps:Pr,normal_pars_fragment:Ur,normal_pars_vertex:wr,normal_vertex:Dr,normalmap_pars_fragment:yr,clearcoat_normal_fragment_begin:Ir,clearcoat_normal_fragment_maps:Nr,clearcoat_pars_fragment:Or,iridescence_pars_fragment:Fr,opaque_fragment:Br,packing:Hr,premultiplied_alpha_fragment:Gr,project_vertex:Vr,dithering_fragment:zr,dithering_pars_fragment:kr,roughnessmap_fragment:Wr,roughnessmap_pars_fragment:Xr,shadowmap_pars_fragment:Yr,shadowmap_pars_vertex:Kr,shadowmap_vertex:jr,shadowmask_pars_fragment:qr,skinbase_vertex:Zr,skinning_pars_vertex:$r,skinning_vertex:Qr,skinnormal_vertex:Jr,specularmap_fragment:ti,specularmap_pars_fragment:ni,tonemapping_fragment:ri,tonemapping_pars_fragment:ii,transmission_fragment:oi,transmission_pars_fragment:si,uv_pars_fragment:li,uv_pars_vertex:ui,uv_vertex:pi,worldpos_vertex:mi,background_vert:hi,background_frag:_i,backgroundCube_vert:gi,backgroundCube_frag:vi,cube_vert:Ei,cube_frag:Si,depth_vert:Ti,depth_frag:Mi,distanceRGBA_vert:xi,distanceRGBA_frag:Ri,equirect_vert:Ai,equirect_frag:bi,linedashed_vert:Ci,linedashed_frag:Li,meshbasic_vert:Pi,meshbasic_frag:Ui,meshlambert_vert:wi,meshlambert_frag:Di,meshmatcap_vert:yi,meshmatcap_frag:Ii,meshnormal_vert:Ni,meshnormal_frag:Oi,meshphong_vert:Fi,meshphong_frag:Bi,meshphysical_vert:Hi,meshphysical_frag:Gi,meshtoon_vert:Vi,meshtoon_frag:zi,points_vert:ki,points_frag:Wi,shadow_vert:Xi,shadow_frag:Yi,sprite_vert:Ki,sprite_frag:ji};const Zi={common:{diffuse:{value:new o(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new n},alphaMap:{value:null},alphaMapTransform:{value:new n},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new n}},envmap:{envMap:{value:null},envMapRotation:{value:new n},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new n}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new n}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new n},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new n},normalScale:{value:new a(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new n},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new n}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new n}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new n}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new o(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new o(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new n},alphaTest:{value:0},uvTransform:{value:new n}},sprite:{diffuse:{value:new o(16777215)},opacity:{value:1},center:{value:new a(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new n},alphaMap:{value:null},alphaMapTransform:{value:new n},alphaTest:{value:0}}};const $i={basic:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.fog]),vertexShader:qi.meshbasic_vert,fragmentShader:qi.meshbasic_frag},lambert:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,Zi.lights,{emissive:{value:new o(0)}}]),vertexShader:qi.meshlambert_vert,fragmentShader:qi.meshlambert_frag},phong:{uniforms:s([Zi.common,Zi.specularmap,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,Zi.lights,{emissive:{value:new o(0)},specular:{value:new o(1118481)},shininess:{value:30}}]),vertexShader:qi.meshphong_vert,fragmentShader:qi.meshphong_frag},standard:{uniforms:s([Zi.common,Zi.envmap,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.roughnessmap,Zi.metalnessmap,Zi.fog,Zi.lights,{emissive:{value:new o(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:qi.meshphysical_vert,fragmentShader:qi.meshphysical_frag},toon:{uniforms:s([Zi.common,Zi.aomap,Zi.lightmap,Zi.emissivemap,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.gradientmap,Zi.fog,Zi.lights,{emissive:{value:new o(0)}}]),vertexShader:qi.meshtoon_vert,fragmentShader:qi.meshtoon_frag},matcap:{uniforms:s([Zi.common,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,Zi.fog,{matcap:{value:null}}]),vertexShader:qi.meshmatcap_vert,fragmentShader:qi.meshmatcap_frag},points:{uniforms:s([Zi.points,Zi.fog]),vertexShader:qi.points_vert,fragmentShader:qi.points_frag},dashed:{uniforms:s([Zi.common,Zi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:qi.linedashed_vert,fragmentShader:qi.linedashed_frag},depth:{uniforms:s([Zi.common,Zi.displacementmap]),vertexShader:qi.depth_vert,fragmentShader:qi.depth_frag},normal:{uniforms:s([Zi.common,Zi.bumpmap,Zi.normalmap,Zi.displacementmap,{opacity:{value:1}}]),vertexShader:qi.meshnormal_vert,fragmentShader:qi.meshnormal_frag},sprite:{uniforms:s([Zi.sprite,Zi.fog]),vertexShader:qi.sprite_vert,fragmentShader:qi.sprite_frag},background:{uniforms:{uvTransform:{value:new n},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:qi.background_vert,fragmentShader:qi.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new n}},vertexShader:qi.backgroundCube_vert,fragmentShader:qi.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:qi.cube_vert,fragmentShader:qi.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:qi.equirect_vert,fragmentShader:qi.equirect_frag},distanceRGBA:{uniforms:s([Zi.common,Zi.displacementmap,{referencePosition:{value:new l},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:qi.distanceRGBA_vert,fragmentShader:qi.distanceRGBA_frag},shadow:{uniforms:s([Zi.lights,Zi.fog,{color:{value:new o(0)},opacity:{value:1}}]),vertexShader:qi.shadow_vert,fragmentShader:qi.shadow_frag}};$i.physical={uniforms:s([$i.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new n},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new n},clearcoatNormalScale:{value:new a(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new n},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new n},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new n},sheen:{value:0},sheenColor:{value:new o(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new n},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new n},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new n},transmissionSamplerSize:{value:new a},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new n},attenuationDistance:{value:0},attenuationColor:{value:new o(0)},specularColor:{value:new o(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new n},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new n},anisotropyVector:{value:new a},anisotropyMap:{value:null},anisotropyMapTransform:{value:new n}}]),vertexShader:qi.meshphysical_vert,fragmentShader:qi.meshphysical_frag};const Qi={r:0,b:0,g:0};const Ji=new c;const to=new d;function no(e,t,n,a,r,i,s){const l=new o(0);let c=i===true?0:1;let d;let f;let m=null;let h=0;let v=null;function M(e){let a=e.isScene===true?e.background:null;if(a&&a.isTexture){const r=e.backgroundBlurriness>0;a=(r?n:t).get(a)}return a}function x(t){let n=false;const r=M(t);if(r===null)A(l,c);else if(r&&r.isColor){A(r,1);n=true}const i=e.xr.getEnvironmentBlendMode();i==="additive"?a.buffers.color.setClear(0,0,0,1,s):i==="alpha-blend"&&a.buffers.color.setClear(0,0,0,0,s);if(e.autoClear||n){a.buffers.depth.setTest(true);a.buffers.depth.setMask(true);a.buffers.color.setMask(true);e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil)}}function R(t,n){const a=M(n);if(a&&(a.isCubeTexture||a.mapping===u)){if(f===void 0){f=new p(new _(1,1,1),new g({name:"BackgroundCubeMaterial",uniforms:S($i.backgroundCube.uniforms),vertexShader:$i.backgroundCube.vertexShader,fragmentShader:$i.backgroundCube.fragmentShader,side:E,depthTest:false,depthWrite:false,fog:false,allowOverride:false}));f.geometry.deleteAttribute("normal");f.geometry.deleteAttribute("uv");f.onBeforeRender=function(e,t,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(f.material,"envMap",{get:function(){return this.uniforms.envMap.value}});r.update(f)}Ji.copy(n.backgroundRotation);Ji.x*=-1;Ji.y*=-1;Ji.z*=-1;if(a.isCubeTexture&&a.isRenderTargetTexture===false){Ji.y*=-1;Ji.z*=-1}f.material.uniforms.envMap.value=a;f.material.uniforms.flipEnvMap.value=a.isCubeTexture&&a.isRenderTargetTexture===false?-1:1;f.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness;f.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;f.material.uniforms.backgroundRotation.value.setFromMatrix4(to.makeRotationFromEuler(Ji));f.material.toneMapped=T.getTransfer(a.colorSpace)!==b;if(m!==a||h!==a.version||v!==e.toneMapping){f.material.needsUpdate=true;m=a;h=a.version;v=e.toneMapping}f.layers.enableAll();t.unshift(f,f.geometry,f.material,0,0,null)}else if(a&&a.isTexture){if(d===void 0){d=new p(new C(2,2),new g({name:"BackgroundMaterial",uniforms:S($i.background.uniforms),vertexShader:$i.background.vertexShader,fragmentShader:$i.background.fragmentShader,side:L,depthTest:false,depthWrite:false,fog:false,allowOverride:false}));d.geometry.deleteAttribute("normal");Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}});r.update(d)}d.material.uniforms.t2D.value=a;d.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;d.material.toneMapped=T.getTransfer(a.colorSpace)!==b;a.matrixAutoUpdate===true&&a.updateMatrix();d.material.uniforms.uvTransform.value.copy(a.matrix);if(m!==a||h!==a.version||v!==e.toneMapping){d.material.needsUpdate=true;m=a;h=a.version;v=e.toneMapping}d.layers.enableAll();t.unshift(d,d.geometry,d.material,0,0,null)}}function A(t,n){t.getRGB(Qi,U(e));a.buffers.color.setClear(Qi.r,Qi.g,Qi.b,n,s)}function P(){if(f!==void 0){f.geometry.dispose();f.material.dispose();f=void 0}if(d!==void 0){d.geometry.dispose();d.material.dispose();d=void 0}}return{getClearColor:function(){return l},setClearColor:function(e,t=1){l.set(e);c=t;A(l,c)},getClearAlpha:function(){return c},setClearAlpha:function(e){c=e;A(l,c)},render:x,addToRenderList:R,dispose:P}}function ao(e,t){const n=e.getParameter(e.MAX_VERTEX_ATTRIBS);const a={};const r=f(null);let i=r;let o=false;function s(n,a,r,s,l){let d=false;const f=u(s,r,a);if(i!==f){i=f;c(i.object)}d=p(n,s,r,l);d&&m(n,s,r,l);l!==null&&t.update(l,e.ELEMENT_ARRAY_BUFFER);if(d||o){o=false;S(n,a,r,s);l!==null&&e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.get(l).buffer)}}function l(){return e.createVertexArray()}function c(t){return e.bindVertexArray(t)}function d(t){return e.deleteVertexArray(t)}function u(e,t,n){const r=n.wireframe===true;let i=a[e.id];if(i===void 0){i={};a[e.id]=i}let o=i[t.id];if(o===void 0){o={};i[t.id]=o}let s=o[r];if(s===void 0){s=f(l());o[r]=s}return s}function f(e){const t=[];const a=[];const r=[];for(let e=0;e<n;e++){t[e]=0;a[e]=0;r[e]=0}return{geometry:null,program:null,wireframe:false,newAttributes:t,enabledAttributes:a,attributeDivisors:r,object:e,attributes:{},index:null}}function p(e,t,n,a){const r=i.attributes;const o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){const n=l[t];if(n.location>=0){const n=r[t];let a=o[t];if(a===void 0){t==="instanceMatrix"&&e.instanceMatrix&&(a=e.instanceMatrix);t==="instanceColor"&&e.instanceColor&&(a=e.instanceColor)}if(n===void 0)return true;if(n.attribute!==a)return true;if(a&&n.data!==a.data)return true;s++}}return i.attributesNum!==s||i.index!==a}function m(e,t,n,a){const r={};const o=t.attributes;let s=0;const l=n.getAttributes();for(const t in l){const n=l[t];if(n.location>=0){let n=o[t];if(n===void 0){t==="instanceMatrix"&&e.instanceMatrix&&(n=e.instanceMatrix);t==="instanceColor"&&e.instanceColor&&(n=e.instanceColor)}const a={};a.attribute=n;n&&n.data&&(a.data=n.data);r[t]=a;s++}}i.attributes=r;i.attributesNum=s;i.index=a}function h(){const e=i.newAttributes;for(let t=0,n=e.length;t<n;t++)e[t]=0}function _(e){g(e,0)}function g(t,n){const a=i.newAttributes;const r=i.enabledAttributes;const o=i.attributeDivisors;a[t]=1;if(r[t]===0){e.enableVertexAttribArray(t);r[t]=1}if(o[t]!==n){e.vertexAttribDivisor(t,n);o[t]=n}}function v(){const t=i.newAttributes;const n=i.enabledAttributes;for(let a=0,r=n.length;a<r;a++)if(n[a]!==t[a]){e.disableVertexAttribArray(a);n[a]=0}}function E(t,n,a,r,i,o,s){s===true?e.vertexAttribIPointer(t,n,a,i,o):e.vertexAttribPointer(t,n,a,r,i,o)}function S(n,a,r,i){h();const o=i.attributes;const s=r.getAttributes();const l=a.defaultAttributeValues;for(const a in s){const r=s[a];if(r.location>=0){let s=o[a];if(s===void 0){a==="instanceMatrix"&&n.instanceMatrix&&(s=n.instanceMatrix);a==="instanceColor"&&n.instanceColor&&(s=n.instanceColor)}if(s!==void 0){const a=s.normalized;const o=s.itemSize;const l=t.get(s);if(l===void 0)continue;const c=l.buffer;const d=l.type;const u=l.bytesPerElement;const f=d===e.INT||d===e.UNSIGNED_INT||s.gpuType===w;if(s.isInterleavedBufferAttribute){const t=s.data;const l=t.stride;const p=s.offset;if(t.isInstancedInterleavedBuffer){for(let e=0;e<r.locationSize;e++)g(r.location+e,t.meshPerAttribute);n.isInstancedMesh!==true&&i._maxInstanceCount===void 0&&(i._maxInstanceCount=t.meshPerAttribute*t.count)}else for(let e=0;e<r.locationSize;e++)_(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<r.locationSize;e++)E(r.location+e,o/r.locationSize,d,a,l*u,(p+o/r.locationSize*e)*u,f)}else{if(s.isInstancedBufferAttribute){for(let e=0;e<r.locationSize;e++)g(r.location+e,s.meshPerAttribute);n.isInstancedMesh!==true&&i._maxInstanceCount===void 0&&(i._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let e=0;e<r.locationSize;e++)_(r.location+e);e.bindBuffer(e.ARRAY_BUFFER,c);for(let e=0;e<r.locationSize;e++)E(r.location+e,o/r.locationSize,d,a,o*u,o/r.locationSize*e*u,f)}}else if(l!==void 0){const t=l[a];if(t!==void 0)switch(t.length){case 2:e.vertexAttrib2fv(r.location,t);break;case 3:e.vertexAttrib3fv(r.location,t);break;case 4:e.vertexAttrib4fv(r.location,t);break;default:e.vertexAttrib1fv(r.location,t)}}}}v()}function T(){R();for(const e in a){const t=a[e];for(const e in t){const n=t[e];for(const e in n){d(n[e].object);delete n[e]}delete t[e]}delete a[e]}}function M(e){if(a[e.id]===void 0)return;const t=a[e.id];for(const e in t){const n=t[e];for(const e in n){d(n[e].object);delete n[e]}delete t[e]}delete a[e.id]}function x(e){for(const t in a){const n=a[t];if(n[e.id]===void 0)continue;const r=n[e.id];for(const e in r){d(r[e].object);delete r[e]}delete n[e.id]}}function R(){A();o=true;if(i!==r){i=r;c(i.object)}}function A(){r.geometry=null;r.program=null;r.wireframe=false}return{setup:s,reset:R,resetDefaultState:A,dispose:T,releaseStatesOfGeometry:M,releaseStatesOfProgram:x,initAttributes:h,enableAttribute:_,disableUnusedAttributes:v}}function ro(e,t,n){let a;function r(e){a=e}function i(t,r){e.drawArrays(a,t,r);n.update(r,a,1)}function o(t,r,i){if(i!==0){e.drawArraysInstanced(a,t,r,i);n.update(r,a,i)}}function s(e,r,i){if(i===0)return;const o=t.get("WEBGL_multi_draw");o.multiDrawArraysWEBGL(a,e,0,r,0,i);let s=0;for(let e=0;e<i;e++)s+=r[e];n.update(s,a,1)}function l(e,r,i,s){if(i===0)return;const l=t.get("WEBGL_multi_draw");if(l===null)for(let t=0;t<e.length;t++)o(e[t],r[t],s[t]);else{l.multiDrawArraysInstancedWEBGL(a,e,0,r,0,s,0,i);let t=0;for(let e=0;e<i;e++)t+=r[e]*s[e];n.update(t,a,1)}}this.setMode=r;this.render=i;this.renderInstances=o;this.renderMultiDraw=s;this.renderMultiDrawInstances=l}function io(e,t,n,a){let r;function i(){if(r!==void 0)return r;if(t.has("EXT_texture_filter_anisotropic")===true){const n=t.get("EXT_texture_filter_anisotropic");r=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r}function o(t){return t===N||a.convert(t)===e.getParameter(e.IMPLEMENTATION_COLOR_READ_FORMAT)}function s(n){const r=n===O&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(n!==F&&a.convert(n)!==e.getParameter(e.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==B&&!r)}function l(t){if(t==="highp"){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return t==="mediump"&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=n.precision!==void 0?n.precision:"highp";const d=l(c);if(d!==c){console.warn("THREE.WebGLRenderer:",c,"not supported, using",d,"instead.");c=d}const u=n.logarithmicDepthBuffer===true;const f=n.reverseDepthBuffer===true&&t.has("EXT_clip_control");const p=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);const m=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const h=e.getParameter(e.MAX_TEXTURE_SIZE);const _=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE);const g=e.getParameter(e.MAX_VERTEX_ATTRIBS);const v=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS);const E=e.getParameter(e.MAX_VARYING_VECTORS);const S=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS);const T=m>0;const M=e.getParameter(e.MAX_SAMPLES);return{isWebGL2:true,getMaxAnisotropy:i,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:s,precision:c,logarithmicDepthBuffer:u,reverseDepthBuffer:f,maxTextures:p,maxVertexTextures:m,maxTextureSize:h,maxCubemapSize:_,maxAttributes:g,maxVertexUniforms:v,maxVaryings:E,maxFragmentUniforms:S,vertexTextures:T,maxSamples:M}}function oo(e){const t=this;let a=null,r=0,i=false,o=false;const s=new H,l=new n,c={value:null,needsUpdate:false};this.uniform=c;this.numPlanes=0;this.numIntersection=0;this.init=function(e,t){const n=e.length!==0||t||r!==0||i;i=t;r=e.length;return n};this.beginShadows=function(){o=true;u(null)};this.endShadows=function(){o=false};this.setGlobalState=function(e,t){a=u(e,t,0)};this.setState=function(t,n,s){const l=t.clippingPlanes,f=t.clipIntersection,p=t.clipShadows;const m=e.get(t);if(!i||l===null||l.length===0||o&&!p)o?u(null):d();else{const e=o?0:r,t=e*4;let i=m.clippingState||null;c.value=i;i=u(l,n,t,s);for(let e=0;e!==t;++e)i[e]=a[e];m.clippingState=i;this.numIntersection=f?this.numPlanes:0;this.numPlanes+=e}};function d(){if(c.value!==a){c.value=a;c.needsUpdate=r>0}t.numPlanes=r;t.numIntersection=0}function u(e,n,a,r){const i=e!==null?e.length:0;let o=null;if(i!==0){o=c.value;if(r!==true||o===null){const t=a+i*4,r=n.matrixWorldInverse;l.getNormalMatrix(r);(o===null||o.length<t)&&(o=new Float32Array(t));for(let t=0,n=a;t!==i;++t,n+=4){s.copy(e[t]).applyMatrix4(r,l);s.normal.toArray(o,n);o[n+3]=s.constant}}c.value=o;c.needsUpdate=true}t.numPlanes=i;t.numIntersection=0;return o}}function so(e){let t=new WeakMap;function n(e,t){t===G?e.mapping=V:t===z&&(e.mapping=k);return e}function a(a){if(a&&a.isTexture){const i=a.mapping;if(i===G||i===z){if(t.has(a)){const e=t.get(a).texture;return n(e,a.mapping)}{const i=a.image;if(i&&i.height>0){const o=new W(i.height);o.fromEquirectangularTexture(e,a);t.set(a,o);a.addEventListener("dispose",r);return n(o.texture,a.mapping)}return null}}}return a}function r(e){const n=e.target;n.removeEventListener("dispose",r);const a=t.get(n);if(a!==void 0){t.delete(n);a.dispose()}}function i(){t=new WeakMap}return{get:a,dispose:i}}const lo=4;const uo=[.125,.215,.35,.446,.526,.582];const po=20;const mo=new X;const ho=new o;let _o=null;let go=0;let vo=0;let Eo=false;const So=(1+Math.sqrt(5))/2;const To=1/So;const Mo=[new l(-So,To,0),new l(So,To,0),new l(-To,0,So),new l(To,0,So),new l(0,So,-To),new l(0,So,To),new l(-1,1,-1),new l(1,1,-1),new l(-1,1,1),new l(1,1,1)];const xo=new l;class PMREMGenerator{
/**
	 * Constructs a new PMREM generator.
	 *
	 * @param {WebGLRenderer} renderer - The renderer.
	 */
constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}
/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety.
	 *
	 * @param {Scene} scene - The scene to be captured.
	 * @param {number} [sigma=0] - The blur radius in radians.
	 * @param {number} [near=0.1] - The near plane distance.
	 * @param {number} [far=100] - The far plane distance.
	 * @param {Object} [options={}] - The configuration options.
	 * @param {number} [options.size=256] - The texture size of the PMREM.
	 * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
	 * @return {WebGLRenderTarget} The resulting PMREM.
	 */fromScene(e,t=0,n=.1,a=100,r={}){const{size:i=256,position:o=xo}=r;_o=this._renderer.getRenderTarget();go=this._renderer.getActiveCubeFace();vo=this._renderer.getActiveMipmapLevel();Eo=this._renderer.xr.enabled;this._renderer.xr.enabled=false;this._setSize(i);const s=this._allocateTargets();s.depthBuffer=true;this._sceneToCubeUV(e,n,a,s,o);t>0&&this._blur(s,0,0,t);this._applyPMREM(s);this._cleanup(s);return s}
/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 *
	 * @param {Texture} equirectangular - The equirectangular texture to be converted.
	 * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
	 * @return {WebGLRenderTarget} The resulting PMREM.
	 */fromEquirectangular(e,t=null){return this._fromTexture(e,t)}
/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 *
	 * @param {Texture} cubemap - The cubemap texture to be converted.
	 * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
	 * @return {WebGLRenderTarget} The resulting PMREM.
	 */fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=Po();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=Lo();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();this._cubemapMaterial!==null&&this._cubemapMaterial.dispose();this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose();this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(_o,go,vo);this._renderer.xr.enabled=Eo;e.scissorTest=false;bo(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===V||e.mapping===k?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4);_o=this._renderer.getRenderTarget();go=this._renderer.getActiveCubeFace();vo=this._renderer.getActiveMipmapLevel();Eo=this._renderer.xr.enabled;this._renderer.xr.enabled=false;const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112);const t=4*this._cubeSize;const n={magFilter:K,minFilter:K,generateMipmaps:false,type:O,format:N,colorSpace:Y,depthBuffer:false};const a=Ao(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose();this._pingPongRenderTarget=Ao(e,t,n);const{_lodMax:a}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Ro(a));this._blurMaterial=Co(a,e,t)}return a}_compileMaterial(e){const t=new p(this._lodPlanes[0],e);this._renderer.compile(t,mo)}_sceneToCubeUV(e,t,n,a,r){const i=90;const o=1;const s=new j(i,o,t,n);const l=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const d=this._renderer;const u=d.autoClear;const f=d.toneMapping;d.getClearColor(ho);d.toneMapping=Z;d.autoClear=false;const m=new $({name:"PMREM.Background",side:E,depthWrite:false,depthTest:false});const h=new p(new _,m);let g=false;const v=e.background;if(v){if(v.isColor){m.color.copy(v);e.background=null;g=true}}else{m.color.copy(ho);g=true}for(let t=0;t<6;t++){const n=t%3;if(n===0){s.up.set(0,l[t],0);s.position.set(r.x,r.y,r.z);s.lookAt(r.x+c[t],r.y,r.z)}else if(n===1){s.up.set(0,0,l[t]);s.position.set(r.x,r.y,r.z);s.lookAt(r.x,r.y+c[t],r.z)}else{s.up.set(0,l[t],0);s.position.set(r.x,r.y,r.z);s.lookAt(r.x,r.y,r.z+c[t])}const i=this._cubeSize;bo(a,n*i,t>2?i:0,i,i);d.setRenderTarget(a);g&&d.render(h,s);d.render(e,s)}h.geometry.dispose();h.material.dispose();d.toneMapping=f;d.autoClear=u;e.background=v}_textureToCubeUV(e,t){const n=this._renderer;const a=e.mapping===V||e.mapping===k;if(a){this._cubemapMaterial===null&&(this._cubemapMaterial=Po());this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else this._equirectMaterial===null&&(this._equirectMaterial=Lo());const r=a?this._cubemapMaterial:this._equirectMaterial;const i=new p(this._lodPlanes[0],r);const o=r.uniforms;o.envMap.value=e;const s=this._cubeSize;bo(t,0,0,3*s,2*s);n.setRenderTarget(t);n.render(i,mo)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;const a=this._lodPlanes.length;for(let t=1;t<a;t++){const n=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]);const r=Mo[(a-t-1)%Mo.length];this._blur(e,t-1,t,n,r)}t.autoClear=n}
/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 *
	 * @private
	 * @param {WebGLRenderTarget} cubeUVRenderTarget
	 * @param {number} lodIn
	 * @param {number} lodOut
	 * @param {number} sigma
	 * @param {Vector3} [poleAxis]
	 */_blur(e,t,n,a,r){const i=this._pingPongRenderTarget;this._halfBlur(e,i,t,n,a,"latitudinal",r);this._halfBlur(i,e,n,n,a,"longitudinal",r)}_halfBlur(e,t,n,a,r,i,o){const s=this._renderer;const l=this._blurMaterial;i!=="latitudinal"&&i!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const c=3;const d=new p(this._lodPlanes[a],l);const u=l.uniforms;const f=this._sizeLods[n]-1;const m=isFinite(r)?Math.PI/(2*f):2*Math.PI/(2*po-1);const h=r/m;const _=isFinite(r)?1+Math.floor(c*h):po;_>po&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${_} samples when the maximum is set to ${po}`);const g=[];let v=0;for(let e=0;e<po;++e){const t=e/h;const n=Math.exp(-t*t/2);g.push(n);e===0?v+=n:e<_&&(v+=2*n)}for(let e=0;e<g.length;e++)g[e]=g[e]/v;u.envMap.value=e.texture;u.samples.value=_;u.weights.value=g;u.latitudinal.value=i==="latitudinal";o&&(u.poleAxis.value=o);const{_lodMax:E}=this;u.dTheta.value=m;u.mipInt.value=E-n;const S=this._sizeLods[a];const T=3*S*(a>E-lo?a-E+lo:0);const M=4*(this._cubeSize-S);bo(t,T,M,3*S,2*S);s.setRenderTarget(t);s.render(d,mo)}}function Ro(e){const t=[];const n=[];const a=[];let r=e;const i=e-lo+1+uo.length;for(let o=0;o<i;o++){const i=Math.pow(2,r);n.push(i);let s=1/i;o>e-lo?s=uo[o-e+lo-1]:o===0&&(s=0);a.push(s);const l=1/(i-2);const c=-l;const d=1+l;const u=[c,c,d,c,d,d,c,c,d,d,c,d];const f=6;const p=6;const m=3;const h=2;const _=1;const g=new Float32Array(m*p*f);const v=new Float32Array(h*p*f);const E=new Float32Array(_*p*f);for(let e=0;e<f;e++){const t=e%3*2/3-1;const n=e>2?0:-1;const a=[t,n,0,t+2/3,n,0,t+2/3,n+1,0,t,n,0,t+2/3,n+1,0,t,n+1,0];g.set(a,m*p*e);v.set(u,h*p*e);const r=[e,e,e,e,e,e];E.set(r,_*p*e)}const S=new Q;S.setAttribute("position",new J(g,m));S.setAttribute("uv",new J(v,h));S.setAttribute("faceIndex",new J(E,_));t.push(S);r>lo&&r--}return{lodPlanes:t,sizeLods:n,sigmas:a}}function Ao(e,t,n){const a=new te(e,t,n);a.texture.mapping=u;a.texture.name="PMREM.cubeUv";a.scissorTest=true;return a}function bo(e,t,n,a,r){e.viewport.set(t,n,a,r);e.scissor.set(t,n,a,r)}function Co(e,t,n){const a=new Float32Array(po);const r=new l(0,1,0);const i=new g({name:"SphericalGaussianBlur",defines:{n:po,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${e}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:a},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:Uo(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:ne,depthTest:false,depthWrite:false});return i}function Lo(){return new g({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Uo(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:ne,depthTest:false,depthWrite:false})}function Po(){return new g({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Uo(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:ne,depthTest:false,depthWrite:false})}function Uo(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function wo(e){let t=new WeakMap;let n=null;function a(a){if(a&&a.isTexture){const o=a.mapping;const s=o===G||o===z;const l=o===V||o===k;if(s||l){let o=t.get(a);const c=o!==void 0?o.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==c){n===null&&(n=new PMREMGenerator(e));o=s?n.fromEquirectangular(a,o):n.fromCubemap(a,o);o.texture.pmremVersion=a.pmremVersion;t.set(a,o);return o.texture}if(o!==void 0)return o.texture;{const c=a.image;if(s&&c&&c.height>0||l&&c&&r(c)){n===null&&(n=new PMREMGenerator(e));o=s?n.fromEquirectangular(a):n.fromCubemap(a);o.texture.pmremVersion=a.pmremVersion;t.set(a,o);a.addEventListener("dispose",i);return o.texture}return null}}}return a}function r(e){let t=0;const n=6;for(let a=0;a<n;a++)e[a]!==void 0&&t++;return t===n}function i(e){const n=e.target;n.removeEventListener("dispose",i);const a=t.get(n);if(a!==void 0){t.delete(n);a.dispose()}}function o(){t=new WeakMap;if(n!==null){n.dispose();n=null}}return{get:a,dispose:o}}function Do(e){const t={};function n(n){if(t[n]!==void 0)return t[n];let a;switch(n){case"WEBGL_depth_texture":a=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":a=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":a=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":a=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:a=e.getExtension(n)}t[n]=a;return a}return{has:function(e){return n(e)!==null},init:function(){n("EXT_color_buffer_float");n("WEBGL_clip_cull_distance");n("OES_texture_float_linear");n("EXT_color_buffer_half_float");n("WEBGL_multisampled_render_to_texture");n("WEBGL_render_shared_exponent")},get:function(e){const t=n(e);t===null&&re("THREE.WebGLRenderer: "+e+" extension not supported.");return t}}}function yo(e,t,n,a){const r={};const i=new WeakMap;function o(e){const s=e.target;s.index!==null&&t.remove(s.index);for(const e in s.attributes)t.remove(s.attributes[e]);s.removeEventListener("dispose",o);delete r[s.id];const l=i.get(s);if(l){t.remove(l);i.delete(s)}a.releaseStatesOfGeometry(s);s.isInstancedBufferGeometry===true&&delete s._maxInstanceCount;n.memory.geometries--}function s(e,t){if(r[t.id]===true)return t;t.addEventListener("dispose",o);r[t.id]=true;n.memory.geometries++;return t}function l(n){const a=n.attributes;for(const n in a)t.update(a[n],e.ARRAY_BUFFER)}function c(e){const n=[];const a=e.index;const r=e.attributes.position;let o=0;if(a!==null){const e=a.array;o=a.version;for(let t=0,a=e.length;t<a;t+=3){const a=e[t+0];const r=e[t+1];const i=e[t+2];n.push(a,r,r,i,i,a)}}else{if(r===void 0)return;{const e=r.array;o=r.version;for(let t=0,a=e.length/3-1;t<a;t+=3){const e=t+0;const a=t+1;const r=t+2;n.push(e,a,a,r,r,e)}}}const s=new(se(n)?ie:oe)(n,1);s.version=o;const l=i.get(e);l&&t.remove(l);i.set(e,s)}function d(e){const t=i.get(e);if(t){const n=e.index;n!==null&&t.version<n.version&&c(e)}else c(e);return i.get(e)}return{get:s,update:l,getWireframeAttribute:d}}function Io(e,t,n){let a;function r(e){a=e}let i,o;function s(e){i=e.type;o=e.bytesPerElement}function l(t,r){e.drawElements(a,r,i,t*o);n.update(r,a,1)}function c(t,r,s){if(s!==0){e.drawElementsInstanced(a,r,i,t*o,s);n.update(r,a,s)}}function d(e,r,o){if(o===0)return;const s=t.get("WEBGL_multi_draw");s.multiDrawElementsWEBGL(a,r,0,i,e,0,o);let l=0;for(let e=0;e<o;e++)l+=r[e];n.update(l,a,1)}function u(e,r,s,l){if(s===0)return;const d=t.get("WEBGL_multi_draw");if(d===null)for(let t=0;t<e.length;t++)c(e[t]/o,r[t],l[t]);else{d.multiDrawElementsInstancedWEBGL(a,r,0,i,e,0,l,0,s);let t=0;for(let e=0;e<s;e++)t+=r[e]*l[e];n.update(t,a,1)}}this.setMode=r;this.setIndex=s;this.render=l;this.renderInstances=c;this.renderMultiDraw=d;this.renderMultiDrawInstances=u}function No(e){const t={geometries:0,textures:0};const n={frame:0,calls:0,triangles:0,points:0,lines:0};function a(t,a,r){n.calls++;switch(a){case e.TRIANGLES:n.triangles+=r*(t/3);break;case e.LINES:n.lines+=r*(t/2);break;case e.LINE_STRIP:n.lines+=r*(t-1);break;case e.LINE_LOOP:n.lines+=r*t;break;case e.POINTS:n.points+=r*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function r(){n.calls=0;n.triangles=0;n.points=0;n.lines=0}return{memory:t,render:n,programs:null,autoReset:true,reset:r,update:a}}function Oo(e,t,n){const r=new WeakMap;const i=new le;function o(o,s,l){const c=o.morphTargetInfluences;const d=s.morphAttributes.position||s.morphAttributes.normal||s.morphAttributes.color;const u=d!==void 0?d.length:0;let f=r.get(s);if(f===void 0||f.count!==u){f!==void 0&&f.texture.dispose();const p=s.morphAttributes.position!==void 0;const m=s.morphAttributes.normal!==void 0;const h=s.morphAttributes.color!==void 0;const _=s.morphAttributes.position||[];const g=s.morphAttributes.normal||[];const v=s.morphAttributes.color||[];let E=0;p===true&&(E=1);m===true&&(E=2);h===true&&(E=3);let S=s.attributes.position.count*E;let T=1;if(S>t.maxTextureSize){T=Math.ceil(S/t.maxTextureSize);S=t.maxTextureSize}const M=new Float32Array(S*T*4*u);const x=new ue(M,S,T,u);x.type=B;x.needsUpdate=true;const R=E*4;for(let b=0;b<u;b++){const C=_[b];const L=g[b];const P=v[b];const U=S*T*4*b;for(let w=0;w<C.count;w++){const D=w*R;if(p===true){i.fromBufferAttribute(C,w);M[U+D+0]=i.x;M[U+D+1]=i.y;M[U+D+2]=i.z;M[U+D+3]=0}if(m===true){i.fromBufferAttribute(L,w);M[U+D+4]=i.x;M[U+D+5]=i.y;M[U+D+6]=i.z;M[U+D+7]=0}if(h===true){i.fromBufferAttribute(P,w);M[U+D+8]=i.x;M[U+D+9]=i.y;M[U+D+10]=i.z;M[U+D+11]=P.itemSize===4?i.w:1}}}f={count:u,texture:x,size:new a(S,T)};r.set(s,f);function A(){x.dispose();r.delete(s);s.removeEventListener("dispose",A)}s.addEventListener("dispose",A)}if(o.isInstancedMesh===true&&o.morphTexture!==null)l.getUniforms().setValue(e,"morphTexture",o.morphTexture,n);else{let y=0;for(let N=0;N<c.length;N++)y+=c[N];const I=s.morphTargetsRelative?1:1-y;l.getUniforms().setValue(e,"morphTargetBaseInfluence",I);l.getUniforms().setValue(e,"morphTargetInfluences",c)}l.getUniforms().setValue(e,"morphTargetsTexture",f.texture,n);l.getUniforms().setValue(e,"morphTargetsTextureSize",f.size)}return{update:o}}function Fo(e,t,n,a){let r=new WeakMap;function i(i){const o=a.render.frame;const l=i.geometry;const c=t.get(i,l);if(r.get(c)!==o){t.update(c);r.set(c,o)}if(i.isInstancedMesh){i.hasEventListener("dispose",s)===false&&i.addEventListener("dispose",s);if(r.get(i)!==o){n.update(i.instanceMatrix,e.ARRAY_BUFFER);i.instanceColor!==null&&n.update(i.instanceColor,e.ARRAY_BUFFER);r.set(i,o)}}if(i.isSkinnedMesh){const e=i.skeleton;if(r.get(e)!==o){e.update();r.set(e,o)}}return c}function o(){r=new WeakMap}function s(e){const t=e.target;t.removeEventListener("dispose",s);n.remove(t.instanceMatrix);t.instanceColor!==null&&n.remove(t.instanceColor)}return{update:i,dispose:o}}const Bo=new pe;const Ho=new me(1,1);const Go=new ue;const Vo=new he;const zo=new _e;const ko=[];const Wo=[];const Xo=new Float32Array(16);const Yo=new Float32Array(9);const Ko=new Float32Array(4);function jo(e,t,n){const a=e[0];if(a<=0||a>0)return e;const r=t*n;let i=ko[r];if(i===void 0){i=new Float32Array(r);ko[r]=i}if(t!==0){a.toArray(i,0);for(let a=1,r=0;a!==t;++a){r+=n;e[a].toArray(i,r)}}return i}function qo(e,t){if(e.length!==t.length)return false;for(let n=0,a=e.length;n<a;n++)if(e[n]!==t[n])return false;return true}function Zo(e,t){for(let n=0,a=t.length;n<a;n++)e[n]=t[n]}function $o(e,t){let n=Wo[t];if(n===void 0){n=new Int32Array(t);Wo[t]=n}for(let a=0;a!==t;++a)n[a]=e.allocateTextureUnit();return n}function Qo(e,t){const n=this.cache;if(n[0]!==t){e.uniform1f(this.addr,t);n[0]=t}}function Jo(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2f(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(qo(n,t))return;e.uniform2fv(this.addr,t);Zo(n,t)}}function es(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3f(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else if(t.r!==void 0){if(n[0]!==t.r||n[1]!==t.g||n[2]!==t.b){e.uniform3f(this.addr,t.r,t.g,t.b);n[0]=t.r;n[1]=t.g;n[2]=t.b}}else{if(qo(n,t))return;e.uniform3fv(this.addr,t);Zo(n,t)}}function ts(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4f(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(qo(n,t))return;e.uniform4fv(this.addr,t);Zo(n,t)}}function ns(e,t){const n=this.cache;const a=t.elements;if(a===void 0){if(qo(n,t))return;e.uniformMatrix2fv(this.addr,false,t);Zo(n,t)}else{if(qo(n,a))return;Ko.set(a);e.uniformMatrix2fv(this.addr,false,Ko);Zo(n,a)}}function as(e,t){const n=this.cache;const a=t.elements;if(a===void 0){if(qo(n,t))return;e.uniformMatrix3fv(this.addr,false,t);Zo(n,t)}else{if(qo(n,a))return;Yo.set(a);e.uniformMatrix3fv(this.addr,false,Yo);Zo(n,a)}}function rs(e,t){const n=this.cache;const a=t.elements;if(a===void 0){if(qo(n,t))return;e.uniformMatrix4fv(this.addr,false,t);Zo(n,t)}else{if(qo(n,a))return;Xo.set(a);e.uniformMatrix4fv(this.addr,false,Xo);Zo(n,a)}}function is(e,t){const n=this.cache;if(n[0]!==t){e.uniform1i(this.addr,t);n[0]=t}}function os(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2i(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(qo(n,t))return;e.uniform2iv(this.addr,t);Zo(n,t)}}function ss(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3i(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(qo(n,t))return;e.uniform3iv(this.addr,t);Zo(n,t)}}function ls(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4i(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(qo(n,t))return;e.uniform4iv(this.addr,t);Zo(n,t)}}function us(e,t){const n=this.cache;if(n[0]!==t){e.uniform1ui(this.addr,t);n[0]=t}}function ps(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y){e.uniform2ui(this.addr,t.x,t.y);n[0]=t.x;n[1]=t.y}}else{if(qo(n,t))return;e.uniform2uiv(this.addr,t);Zo(n,t)}}function ms(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z){e.uniform3ui(this.addr,t.x,t.y,t.z);n[0]=t.x;n[1]=t.y;n[2]=t.z}}else{if(qo(n,t))return;e.uniform3uiv(this.addr,t);Zo(n,t)}}function hs(e,t){const n=this.cache;if(t.x!==void 0){if(n[0]!==t.x||n[1]!==t.y||n[2]!==t.z||n[3]!==t.w){e.uniform4ui(this.addr,t.x,t.y,t.z,t.w);n[0]=t.x;n[1]=t.y;n[2]=t.z;n[3]=t.w}}else{if(qo(n,t))return;e.uniform4uiv(this.addr,t);Zo(n,t)}}function _s(e,t,n){const a=this.cache;const r=n.allocateTextureUnit();if(a[0]!==r){e.uniform1i(this.addr,r);a[0]=r}let i;if(this.type===e.SAMPLER_2D_SHADOW){Ho.compareFunction=ge;i=Ho}else i=Bo;n.setTexture2D(t||i,r)}function gs(e,t,n){const a=this.cache;const r=n.allocateTextureUnit();if(a[0]!==r){e.uniform1i(this.addr,r);a[0]=r}n.setTexture3D(t||Vo,r)}function vs(e,t,n){const a=this.cache;const r=n.allocateTextureUnit();if(a[0]!==r){e.uniform1i(this.addr,r);a[0]=r}n.setTextureCube(t||zo,r)}function Es(e,t,n){const a=this.cache;const r=n.allocateTextureUnit();if(a[0]!==r){e.uniform1i(this.addr,r);a[0]=r}n.setTexture2DArray(t||Go,r)}function Ss(e){switch(e){case 5126:return Qo;case 35664:return Jo;case 35665:return es;case 35666:return ts;case 35674:return ns;case 35675:return as;case 35676:return rs;case 5124:case 35670:return is;case 35667:case 35671:return os;case 35668:case 35672:return ss;case 35669:case 35673:return ls;case 5125:return us;case 36294:return ps;case 36295:return ms;case 36296:return hs;case 35678:case 36198:case 36298:case 36306:case 35682:return _s;case 35679:case 36299:case 36307:return gs;case 35680:case 36300:case 36308:case 36293:return vs;case 36289:case 36303:case 36311:case 36292:return Es}}function Ts(e,t){e.uniform1fv(this.addr,t)}function Ms(e,t){const n=jo(t,this.size,2);e.uniform2fv(this.addr,n)}function xs(e,t){const n=jo(t,this.size,3);e.uniform3fv(this.addr,n)}function Rs(e,t){const n=jo(t,this.size,4);e.uniform4fv(this.addr,n)}function As(e,t){const n=jo(t,this.size,4);e.uniformMatrix2fv(this.addr,false,n)}function bs(e,t){const n=jo(t,this.size,9);e.uniformMatrix3fv(this.addr,false,n)}function Cs(e,t){const n=jo(t,this.size,16);e.uniformMatrix4fv(this.addr,false,n)}function Ls(e,t){e.uniform1iv(this.addr,t)}function Ps(e,t){e.uniform2iv(this.addr,t)}function Us(e,t){e.uniform3iv(this.addr,t)}function ws(e,t){e.uniform4iv(this.addr,t)}function Ds(e,t){e.uniform1uiv(this.addr,t)}function ys(e,t){e.uniform2uiv(this.addr,t)}function Is(e,t){e.uniform3uiv(this.addr,t)}function Ns(e,t){e.uniform4uiv(this.addr,t)}function Os(e,t,n){const a=this.cache;const r=t.length;const i=$o(n,r);if(!qo(a,i)){e.uniform1iv(this.addr,i);Zo(a,i)}for(let e=0;e!==r;++e)n.setTexture2D(t[e]||Bo,i[e])}function Fs(e,t,n){const a=this.cache;const r=t.length;const i=$o(n,r);if(!qo(a,i)){e.uniform1iv(this.addr,i);Zo(a,i)}for(let e=0;e!==r;++e)n.setTexture3D(t[e]||Vo,i[e])}function Bs(e,t,n){const a=this.cache;const r=t.length;const i=$o(n,r);if(!qo(a,i)){e.uniform1iv(this.addr,i);Zo(a,i)}for(let e=0;e!==r;++e)n.setTextureCube(t[e]||zo,i[e])}function Hs(e,t,n){const a=this.cache;const r=t.length;const i=$o(n,r);if(!qo(a,i)){e.uniform1iv(this.addr,i);Zo(a,i)}for(let e=0;e!==r;++e)n.setTexture2DArray(t[e]||Go,i[e])}function Gs(e){switch(e){case 5126:return Ts;case 35664:return Ms;case 35665:return xs;case 35666:return Rs;case 35674:return As;case 35675:return bs;case 35676:return Cs;case 5124:case 35670:return Ls;case 35667:case 35671:return Ps;case 35668:case 35672:return Us;case 35669:case 35673:return ws;case 5125:return Ds;case 36294:return ys;case 36295:return Is;case 36296:return Ns;case 35678:case 36198:case 36298:case 36306:case 35682:return Os;case 35679:case 36299:case 36307:return Fs;case 35680:case 36300:case 36308:case 36293:return Bs;case 36289:case 36303:case 36311:case 36292:return Hs}}class SingleUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=Ss(t.type)}}class PureArrayUniform{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=Gs(t.type)}}class StructuredUniform{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(e,t,n){const a=this.seq;for(let r=0,i=a.length;r!==i;++r){const i=a[r];i.setValue(e,t[i.id],n)}}}const Vs=/(\w+)(\])?(\[|\.)?/g;function zs(e,t){e.seq.push(t);e.map[t.id]=t}function ks(e,t,n){const a=e.name,r=a.length;Vs.lastIndex=0;while(true){const i=Vs.exec(a),o=Vs.lastIndex;let s=i[1];const l=i[2]==="]",c=i[3];l&&(s|=0);if(c===void 0||c==="["&&o+2===r){zs(n,c===void 0?new SingleUniform(s,e,t):new PureArrayUniform(s,e,t));break}{const e=n.map;let t=e[s];if(t===void 0){t=new StructuredUniform(s);zs(n,t)}n=t}}}class WebGLUniforms{constructor(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let a=0;a<n;++a){const n=e.getActiveUniform(t,a),r=e.getUniformLocation(t,n.name);ks(n,r,this)}}setValue(e,t,n,a){const r=this.map[t];r!==void 0&&r.setValue(e,n,a)}setOptional(e,t,n){const a=t[n];a!==void 0&&this.setValue(e,n,a)}static upload(e,t,n,a){for(let r=0,i=t.length;r!==i;++r){const i=t[r],o=n[i.id];o.needsUpdate!==false&&i.setValue(e,o.value,a)}}static seqWithValue(e,t){const n=[];for(let a=0,r=e.length;a!==r;++a){const r=e[a];r.id in t&&n.push(r)}return n}}function Ws(e,t,n){const a=e.createShader(t);e.shaderSource(a,n);e.compileShader(a);return a}const Xs=37297;let Ys=0;function Ks(e,t){const n=e.split("\n");const a=[];const r=Math.max(t-6,0);const i=Math.min(t+6,n.length);for(let e=r;e<i;e++){const r=e+1;a.push(`${r===t?">":" "} ${r}: ${n[e]}`)}return a.join("\n")}const js=new n;function qs(e){T._getMatrix(js,T.workingColorSpace,e);const t=`mat3( ${js.elements.map((e=>e.toFixed(4)))} )`;switch(T.getTransfer(e)){case ve:return[t,"LinearTransferOETF"];case b:return[t,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space: ",e);return[t,"LinearTransferOETF"]}}function Zs(e,t,n){const a=e.getShaderParameter(t,e.COMPILE_STATUS);const r=e.getShaderInfoLog(t).trim();if(a&&r==="")return"";const i=/ERROR: 0:(\d+)/.exec(r);if(i){const a=parseInt(i[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+Ks(e.getShaderSource(t),a)}return r}function $s(e,t){const n=qs(t);return[`vec4 ${e}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function Qs(e,t){let n;switch(t){case Ae:n="Linear";break;case Re:n="Reinhard";break;case xe:n="Cineon";break;case Me:n="ACESFilmic";break;case Te:n="AgX";break;case Se:n="Neutral";break;case Ee:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t);n="Linear"}return"vec3 "+e+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const Js=new l;function el(){T.getLuminanceCoefficients(Js);const e=Js.x.toFixed(4);const t=Js.y.toFixed(4);const n=Js.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${e}, ${t}, ${n} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function tl(e){const t=[e.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",e.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return t.filter(rl).join("\n")}function nl(e){const t=[];for(const n in e){const a=e[n];a!==false&&t.push("#define "+n+" "+a)}return t.join("\n")}function al(e,t){const n={};const a=e.getProgramParameter(t,e.ACTIVE_ATTRIBUTES);for(let r=0;r<a;r++){const a=e.getActiveAttrib(t,r);const i=a.name;let o=1;a.type===e.FLOAT_MAT2&&(o=2);a.type===e.FLOAT_MAT3&&(o=3);a.type===e.FLOAT_MAT4&&(o=4);n[i]={type:a.type,location:e.getAttribLocation(t,i),locationSize:o}}return n}function rl(e){return e!==""}function il(e,t){const n=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function ol(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const sl=/^[ \t]*#include +<([\w\d./]+)>/gm;function ll(e){return e.replace(sl,pl)}const ul=new Map;function pl(e,t){let n=qi[t];if(n===void 0){const e=ul.get(t);if(e===void 0)throw new Error("Can not resolve #include <"+t+">");n=qi[e];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,e)}return ll(n)}const ml=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function hl(e){return e.replace(ml,_l)}function _l(e,t,n,a){let r="";for(let e=parseInt(t);e<parseInt(n);e++)r+=a.replace(/\[\s*i\s*\]/g,"[ "+e+" ]").replace(/UNROLLED_LOOP_INDEX/g,e);return r}function gl(e){let t=`precision ${e.precision} float;\n\tprecision ${e.precision} int;\n\tprecision ${e.precision} sampler2D;\n\tprecision ${e.precision} samplerCube;\n\tprecision ${e.precision} sampler3D;\n\tprecision ${e.precision} sampler2DArray;\n\tprecision ${e.precision} sampler2DShadow;\n\tprecision ${e.precision} samplerCubeShadow;\n\tprecision ${e.precision} sampler2DArrayShadow;\n\tprecision ${e.precision} isampler2D;\n\tprecision ${e.precision} isampler3D;\n\tprecision ${e.precision} isamplerCube;\n\tprecision ${e.precision} isampler2DArray;\n\tprecision ${e.precision} usampler2D;\n\tprecision ${e.precision} usampler3D;\n\tprecision ${e.precision} usamplerCube;\n\tprecision ${e.precision} usampler2DArray;\n\t`;e.precision==="highp"?t+="\n#define HIGH_PRECISION":e.precision==="mediump"?t+="\n#define MEDIUM_PRECISION":e.precision==="lowp"&&(t+="\n#define LOW_PRECISION");return t}function vl(e){let t="SHADOWMAP_TYPE_BASIC";e.shadowMapType===be?t="SHADOWMAP_TYPE_PCF":e.shadowMapType===Ce?t="SHADOWMAP_TYPE_PCF_SOFT":e.shadowMapType===Le&&(t="SHADOWMAP_TYPE_VSM");return t}function El(e){let t="ENVMAP_TYPE_CUBE";if(e.envMap)switch(e.envMapMode){case V:case k:t="ENVMAP_TYPE_CUBE";break;case u:t="ENVMAP_TYPE_CUBE_UV";break}return t}function Sl(e){let t="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(e.envMapMode){case k:t="ENVMAP_MODE_REFRACTION";break}return t}function Tl(e){let t="ENVMAP_BLENDING_NONE";if(e.envMap)switch(e.combine){case we:t="ENVMAP_BLENDING_MULTIPLY";break;case Ue:t="ENVMAP_BLENDING_MIX";break;case Pe:t="ENVMAP_BLENDING_ADD";break}return t}function Ml(e){const t=e.envMapCubeUVHeight;if(t===null)return null;const n=Math.log2(t)-2;const a=1/t;const r=1/(3*Math.max(Math.pow(2,n),112));return{texelWidth:r,texelHeight:a,maxMip:n}}function xl(e,t,n,a){const r=e.getContext();const i=n.defines;let o=n.vertexShader;let s=n.fragmentShader;const l=vl(n);const c=El(n);const d=Sl(n);const u=Tl(n);const f=Ml(n);const p=tl(n);const m=nl(i);const h=r.createProgram();let _,g;let v=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){_=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(rl).join("\n");_.length>0&&(_+="\n");g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m].filter(rl).join("\n");g.length>0&&(g+="\n")}else{_=[gl(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(rl).join("\n");g=[gl(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,m,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+d:"",n.envMap?"#define "+u:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==Z?"#define TONE_MAPPING":"",n.toneMapping!==Z?qi.tonemapping_pars_fragment:"",n.toneMapping!==Z?Qs("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",qi.colorspace_pars_fragment,$s("linearToOutputTexel",n.outputColorSpace),el(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(rl).join("\n")}o=ll(o);o=il(o,n);o=ol(o,n);s=ll(s);s=il(s,n);s=ol(s,n);o=hl(o);s=hl(s);if(n.isRawShaderMaterial!==true){v="#version 300 es\n";_=[p,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+_;g=["#define varying in",n.glslVersion===De?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===De?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+g}const E=v+_+o;const S=v+g+s;const T=Ws(r,r.VERTEX_SHADER,E);const M=Ws(r,r.FRAGMENT_SHADER,S);r.attachShader(h,T);r.attachShader(h,M);n.index0AttributeName!==void 0?r.bindAttribLocation(h,0,n.index0AttributeName):n.morphTargets===true&&r.bindAttribLocation(h,0,"position");r.linkProgram(h);function x(t){if(e.debug.checkShaderErrors){const n=r.getProgramInfoLog(h).trim();const a=r.getShaderInfoLog(T).trim();const i=r.getShaderInfoLog(M).trim();let o=true;let s=true;if(r.getProgramParameter(h,r.LINK_STATUS)===false){o=false;if(typeof e.debug.onShaderError==="function")e.debug.onShaderError(r,h,T,M);else{const e=Zs(r,T,"vertex");const a=Zs(r,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(h,r.VALIDATE_STATUS)+"\n\nMaterial Name: "+t.name+"\nMaterial Type: "+t.type+"\n\nProgram Info Log: "+n+"\n"+e+"\n"+a)}}else n!==""?console.warn("THREE.WebGLProgram: Program Info Log:",n):a!==""&&i!==""||(s=false);s&&(t.diagnostics={runnable:o,programLog:n,vertexShader:{log:a,prefix:_},fragmentShader:{log:i,prefix:g}})}r.deleteShader(T);r.deleteShader(M);R=new WebGLUniforms(r,h);A=al(r,h)}let R;this.getUniforms=function(){R===void 0&&x(this);return R};let A;this.getAttributes=function(){A===void 0&&x(this);return A};let b=n.rendererExtensionParallelShaderCompile===false;this.isReady=function(){b===false&&(b=r.getProgramParameter(h,Xs));return b};this.destroy=function(){a.releaseStatesOfProgram(this);r.deleteProgram(h);this.program=void 0};this.type=n.shaderType;this.name=n.shaderName;this.id=Ys++;this.cacheKey=t;this.usedTimes=1;this.program=h;this.vertexShader=T;this.fragmentShader=M;return this}let Rl=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const a=this._getShaderStage(t);const r=this._getShaderStage(n);const i=this._getShaderCacheForMaterial(e);if(i.has(a)===false){i.add(a);a.usedTimes++}if(i.has(r)===false){i.add(r);r.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const e of t){e.usedTimes--;e.usedTimes===0&&this.shaderCache.delete(e.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===void 0){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===void 0){n=new WebGLShaderStage(e);t.set(e,n)}return n}}class WebGLShaderStage{constructor(e){this.id=Rl++;this.code=e;this.usedTimes=0}}function Al(e,t,n,a,r,i,o){const s=new ye;const l=new WebGLShaderCache;const c=new Set;const d=[];const f=r.logarithmicDepthBuffer;const p=r.vertexTextures;let m=r.precision;const h={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(e){c.add(e);return e===0?"uv":`uv${e}`}function g(i,s,d,g,v){const S=g.fog;const M=v.geometry;const x=i.isMeshStandardMaterial?g.environment:null;const R=(i.isMeshStandardMaterial?n:t).get(i.envMap||x);const A=!R||R.mapping!==u?null:R.image.height;const C=h[i.type];if(i.precision!==null){m=r.getMaxPrecision(i.precision);m!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",m,"instead.")}const L=M.morphAttributes.position||M.morphAttributes.normal||M.morphAttributes.color;const P=L!==void 0?L.length:0;let U=0;M.morphAttributes.position!==void 0&&(U=1);M.morphAttributes.normal!==void 0&&(U=2);M.morphAttributes.color!==void 0&&(U=3);let w,D;let y,I;if(C){const e=$i[C];w=e.vertexShader;D=e.fragmentShader}else{w=i.vertexShader;D=i.fragmentShader;l.update(i);y=l.getVertexShaderID(i);I=l.getFragmentShaderID(i)}const N=e.getRenderTarget();const O=e.state.buffers.depth.getReversed();const F=v.isInstancedMesh===true;const B=v.isBatchedMesh===true;const H=!!i.map;const G=!!i.matcap;const V=!!R;const z=!!i.aoMap;const k=!!i.lightMap;const W=!!i.bumpMap;const X=!!i.normalMap;const K=!!i.displacementMap;const j=!!i.emissiveMap;const q=!!i.metalnessMap;const $=!!i.roughnessMap;const Q=i.anisotropy>0;const J=i.clearcoat>0;const ee=i.dispersion>0;const te=i.iridescence>0;const ne=i.sheen>0;const ae=i.transmission>0;const re=Q&&!!i.anisotropyMap;const ie=J&&!!i.clearcoatMap;const oe=J&&!!i.clearcoatNormalMap;const se=J&&!!i.clearcoatRoughnessMap;const le=te&&!!i.iridescenceMap;const ce=te&&!!i.iridescenceThicknessMap;const de=ne&&!!i.sheenColorMap;const ue=ne&&!!i.sheenRoughnessMap;const fe=!!i.specularMap;const pe=!!i.specularColorMap;const me=!!i.specularIntensityMap;const he=ae&&!!i.transmissionMap;const _e=ae&&!!i.thicknessMap;const ge=!!i.gradientMap;const ve=!!i.alphaMap;const Ee=i.alphaTest>0;const Se=!!i.alphaHash;const Te=!!i.extensions;let Me=Z;i.toneMapped&&(N!==null&&N.isXRRenderTarget!==true||(Me=e.toneMapping));const xe={shaderID:C,shaderType:i.type,shaderName:i.name,vertexShader:w,fragmentShader:D,defines:i.defines,customVertexShaderID:y,customFragmentShaderID:I,isRawShaderMaterial:i.isRawShaderMaterial===true,glslVersion:i.glslVersion,precision:m,batching:B,batchingColor:B&&v._colorsTexture!==null,instancing:F,instancingColor:F&&v.instanceColor!==null,instancingMorph:F&&v.morphTexture!==null,supportsVertexTextures:p,outputColorSpace:N===null?e.outputColorSpace:N.isXRRenderTarget===true?N.texture.colorSpace:Y,alphaToCoverage:!!i.alphaToCoverage,map:H,matcap:G,envMap:V,envMapMode:V&&R.mapping,envMapCubeUVHeight:A,aoMap:z,lightMap:k,bumpMap:W,normalMap:X,displacementMap:p&&K,emissiveMap:j,normalMapObjectSpace:X&&i.normalMapType===Fe,normalMapTangentSpace:X&&i.normalMapType===Oe,metalnessMap:q,roughnessMap:$,anisotropy:Q,anisotropyMap:re,clearcoat:J,clearcoatMap:ie,clearcoatNormalMap:oe,clearcoatRoughnessMap:se,dispersion:ee,iridescence:te,iridescenceMap:le,iridescenceThicknessMap:ce,sheen:ne,sheenColorMap:de,sheenRoughnessMap:ue,specularMap:fe,specularColorMap:pe,specularIntensityMap:me,transmission:ae,transmissionMap:he,thicknessMap:_e,gradientMap:ge,opaque:i.transparent===false&&i.blending===Ne&&i.alphaToCoverage===false,alphaMap:ve,alphaTest:Ee,alphaHash:Se,combine:i.combine,mapUv:H&&_(i.map.channel),aoMapUv:z&&_(i.aoMap.channel),lightMapUv:k&&_(i.lightMap.channel),bumpMapUv:W&&_(i.bumpMap.channel),normalMapUv:X&&_(i.normalMap.channel),displacementMapUv:K&&_(i.displacementMap.channel),emissiveMapUv:j&&_(i.emissiveMap.channel),metalnessMapUv:q&&_(i.metalnessMap.channel),roughnessMapUv:$&&_(i.roughnessMap.channel),anisotropyMapUv:re&&_(i.anisotropyMap.channel),clearcoatMapUv:ie&&_(i.clearcoatMap.channel),clearcoatNormalMapUv:oe&&_(i.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:se&&_(i.clearcoatRoughnessMap.channel),iridescenceMapUv:le&&_(i.iridescenceMap.channel),iridescenceThicknessMapUv:ce&&_(i.iridescenceThicknessMap.channel),sheenColorMapUv:de&&_(i.sheenColorMap.channel),sheenRoughnessMapUv:ue&&_(i.sheenRoughnessMap.channel),specularMapUv:fe&&_(i.specularMap.channel),specularColorMapUv:pe&&_(i.specularColorMap.channel),specularIntensityMapUv:me&&_(i.specularIntensityMap.channel),transmissionMapUv:he&&_(i.transmissionMap.channel),thicknessMapUv:_e&&_(i.thicknessMap.channel),alphaMapUv:ve&&_(i.alphaMap.channel),vertexTangents:!!M.attributes.tangent&&(X||Q),vertexColors:i.vertexColors,vertexAlphas:i.vertexColors===true&&!!M.attributes.color&&M.attributes.color.itemSize===4,pointsUvs:v.isPoints===true&&!!M.attributes.uv&&(H||ve),fog:!!S,useFog:i.fog===true,fogExp2:!!S&&S.isFogExp2,flatShading:i.flatShading===true,sizeAttenuation:i.sizeAttenuation===true,logarithmicDepthBuffer:f,reverseDepthBuffer:O,skinning:v.isSkinnedMesh===true,morphTargets:M.morphAttributes.position!==void 0,morphNormals:M.morphAttributes.normal!==void 0,morphColors:M.morphAttributes.color!==void 0,morphTargetsCount:P,morphTextureStride:U,numDirLights:s.directional.length,numPointLights:s.point.length,numSpotLights:s.spot.length,numSpotLightMaps:s.spotLightMap.length,numRectAreaLights:s.rectArea.length,numHemiLights:s.hemi.length,numDirLightShadows:s.directionalShadowMap.length,numPointLightShadows:s.pointShadowMap.length,numSpotLightShadows:s.spotShadowMap.length,numSpotLightShadowsWithMaps:s.numSpotLightShadowsWithMaps,numLightProbes:s.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:i.dithering,shadowMapEnabled:e.shadowMap.enabled&&d.length>0,shadowMapType:e.shadowMap.type,toneMapping:Me,decodeVideoTexture:H&&i.map.isVideoTexture===true&&T.getTransfer(i.map.colorSpace)===b,decodeVideoTextureEmissive:j&&i.emissiveMap.isVideoTexture===true&&T.getTransfer(i.emissiveMap.colorSpace)===b,premultipliedAlpha:i.premultipliedAlpha,doubleSided:i.side===Ie,flipSided:i.side===E,useDepthPacking:i.depthPacking>=0,depthPacking:i.depthPacking||0,index0AttributeName:i.index0AttributeName,extensionClipCullDistance:Te&&i.extensions.clipCullDistance===true&&a.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Te&&i.extensions.multiDraw===true||B)&&a.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:a.has("KHR_parallel_shader_compile"),customProgramCacheKey:i.customProgramCacheKey()};xe.vertexUv1s=c.has(1);xe.vertexUv2s=c.has(2);xe.vertexUv3s=c.has(3);c.clear();return xe}function v(t){const n=[];if(t.shaderID)n.push(t.shaderID);else{n.push(t.customVertexShaderID);n.push(t.customFragmentShaderID)}if(t.defines!==void 0)for(const e in t.defines){n.push(e);n.push(t.defines[e])}if(t.isRawShaderMaterial===false){S(n,t);M(n,t);n.push(e.outputColorSpace)}n.push(t.customProgramCacheKey);return n.join()}function S(e,t){e.push(t.precision);e.push(t.outputColorSpace);e.push(t.envMapMode);e.push(t.envMapCubeUVHeight);e.push(t.mapUv);e.push(t.alphaMapUv);e.push(t.lightMapUv);e.push(t.aoMapUv);e.push(t.bumpMapUv);e.push(t.normalMapUv);e.push(t.displacementMapUv);e.push(t.emissiveMapUv);e.push(t.metalnessMapUv);e.push(t.roughnessMapUv);e.push(t.anisotropyMapUv);e.push(t.clearcoatMapUv);e.push(t.clearcoatNormalMapUv);e.push(t.clearcoatRoughnessMapUv);e.push(t.iridescenceMapUv);e.push(t.iridescenceThicknessMapUv);e.push(t.sheenColorMapUv);e.push(t.sheenRoughnessMapUv);e.push(t.specularMapUv);e.push(t.specularColorMapUv);e.push(t.specularIntensityMapUv);e.push(t.transmissionMapUv);e.push(t.thicknessMapUv);e.push(t.combine);e.push(t.fogExp2);e.push(t.sizeAttenuation);e.push(t.morphTargetsCount);e.push(t.morphAttributeCount);e.push(t.numDirLights);e.push(t.numPointLights);e.push(t.numSpotLights);e.push(t.numSpotLightMaps);e.push(t.numHemiLights);e.push(t.numRectAreaLights);e.push(t.numDirLightShadows);e.push(t.numPointLightShadows);e.push(t.numSpotLightShadows);e.push(t.numSpotLightShadowsWithMaps);e.push(t.numLightProbes);e.push(t.shadowMapType);e.push(t.toneMapping);e.push(t.numClippingPlanes);e.push(t.numClipIntersection);e.push(t.depthPacking)}function M(e,t){s.disableAll();t.supportsVertexTextures&&s.enable(0);t.instancing&&s.enable(1);t.instancingColor&&s.enable(2);t.instancingMorph&&s.enable(3);t.matcap&&s.enable(4);t.envMap&&s.enable(5);t.normalMapObjectSpace&&s.enable(6);t.normalMapTangentSpace&&s.enable(7);t.clearcoat&&s.enable(8);t.iridescence&&s.enable(9);t.alphaTest&&s.enable(10);t.vertexColors&&s.enable(11);t.vertexAlphas&&s.enable(12);t.vertexUv1s&&s.enable(13);t.vertexUv2s&&s.enable(14);t.vertexUv3s&&s.enable(15);t.vertexTangents&&s.enable(16);t.anisotropy&&s.enable(17);t.alphaHash&&s.enable(18);t.batching&&s.enable(19);t.dispersion&&s.enable(20);t.batchingColor&&s.enable(21);e.push(s.mask);s.disableAll();t.fog&&s.enable(0);t.useFog&&s.enable(1);t.flatShading&&s.enable(2);t.logarithmicDepthBuffer&&s.enable(3);t.reverseDepthBuffer&&s.enable(4);t.skinning&&s.enable(5);t.morphTargets&&s.enable(6);t.morphNormals&&s.enable(7);t.morphColors&&s.enable(8);t.premultipliedAlpha&&s.enable(9);t.shadowMapEnabled&&s.enable(10);t.doubleSided&&s.enable(11);t.flipSided&&s.enable(12);t.useDepthPacking&&s.enable(13);t.dithering&&s.enable(14);t.transmission&&s.enable(15);t.sheen&&s.enable(16);t.opaque&&s.enable(17);t.pointsUvs&&s.enable(18);t.decodeVideoTexture&&s.enable(19);t.decodeVideoTextureEmissive&&s.enable(20);t.alphaToCoverage&&s.enable(21);e.push(s.mask)}function x(e){const t=h[e.type];let n;if(t){const e=$i[t];n=Be.clone(e.uniforms)}else n=e.uniforms;return n}function R(t,n){let a;for(let e=0,t=d.length;e<t;e++){const t=d[e];if(t.cacheKey===n){a=t;++a.usedTimes;break}}if(a===void 0){a=new xl(e,n,t,i);d.push(a)}return a}function A(e){if(--e.usedTimes===0){const t=d.indexOf(e);d[t]=d[d.length-1];d.pop();e.destroy()}}function C(e){l.remove(e)}function L(){l.dispose()}return{getParameters:g,getProgramCacheKey:v,getUniforms:x,acquireProgram:R,releaseProgram:A,releaseShaderCache:C,programs:d,dispose:L}}function bl(){let e=new WeakMap;function t(t){return e.has(t)}function n(t){let n=e.get(t);if(n===void 0){n={};e.set(t,n)}return n}function a(t){e.delete(t)}function r(t,n,a){e.get(t)[n]=a}function i(){e=new WeakMap}return{has:t,get:n,remove:a,update:r,dispose:i}}function Cl(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Ll(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Pl(){const e=[];let t=0;const n=[];const a=[];const r=[];function i(){t=0;n.length=0;a.length=0;r.length=0}function o(n,a,r,i,o,s){let l=e[t];if(l===void 0){l={id:n.id,object:n,geometry:a,material:r,groupOrder:i,renderOrder:n.renderOrder,z:o,group:s};e[t]=l}else{l.id=n.id;l.object=n;l.geometry=a;l.material=r;l.groupOrder=i;l.renderOrder=n.renderOrder;l.z=o;l.group=s}t++;return l}function s(e,t,i,s,l,c){const d=o(e,t,i,s,l,c);i.transmission>0?a.push(d):i.transparent===true?r.push(d):n.push(d)}function l(e,t,i,s,l,c){const d=o(e,t,i,s,l,c);i.transmission>0?a.unshift(d):i.transparent===true?r.unshift(d):n.unshift(d)}function c(e,t){n.length>1&&n.sort(e||Cl);a.length>1&&a.sort(t||Ll);r.length>1&&r.sort(t||Ll)}function d(){for(let n=t,a=e.length;n<a;n++){const t=e[n];if(t.id===null)break;t.id=null;t.object=null;t.geometry=null;t.material=null;t.group=null}}return{opaque:n,transmissive:a,transparent:r,init:i,push:s,unshift:l,finish:d,sort:c}}function Ul(){let e=new WeakMap;function t(t,n){const a=e.get(t);let r;if(a===void 0){r=new Pl;e.set(t,[r])}else if(n>=a.length){r=new Pl;a.push(r)}else r=a[n];return r}function n(){e=new WeakMap}return{get:t,dispose:n}}function wl(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={direction:new l,color:new o};break;case"SpotLight":n={position:new l,direction:new l,color:new o,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new l,color:new o,distance:0,decay:0};break;case"HemisphereLight":n={direction:new l,skyColor:new o,groundColor:new o};break;case"RectAreaLight":n={color:new o,position:new l,halfWidth:new l,halfHeight:new l};break}e[t.id]=n;return n}}}function Dl(){const e={};return{get:function(t){if(e[t.id]!==void 0)return e[t.id];let n;switch(t.type){case"DirectionalLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new a};break;case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new a};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new a,shadowCameraNear:1,shadowCameraFar:1e3};break}e[t.id]=n;return n}}}let yl=0;function Il(e,t){return(t.castShadow?2:0)-(e.castShadow?2:0)+(t.map?1:0)-(e.map?1:0)}function Nl(e){const t=new wl;const n=Dl();const a={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let e=0;e<9;e++)a.probe.push(new l);const r=new l;const i=new d;const o=new d;function s(r){let i=0,o=0,s=0;for(let e=0;e<9;e++)a.probe[e].set(0,0,0);let l=0;let c=0;let d=0;let u=0;let f=0;let p=0;let m=0;let h=0;let _=0;let g=0;let v=0;r.sort(Il);for(let e=0,E=r.length;e<E;e++){const E=r[e];const S=E.color;const T=E.intensity;const M=E.distance;const x=E.shadow&&E.shadow.map?E.shadow.map.texture:null;if(E.isAmbientLight){i+=S.r*T;o+=S.g*T;s+=S.b*T}else if(E.isLightProbe){for(let e=0;e<9;e++)a.probe[e].addScaledVector(E.sh.coefficients[e],T);v++}else if(E.isDirectionalLight){const e=t.get(E);e.color.copy(E.color).multiplyScalar(E.intensity);if(E.castShadow){const e=E.shadow;const t=n.get(E);t.shadowIntensity=e.intensity;t.shadowBias=e.bias;t.shadowNormalBias=e.normalBias;t.shadowRadius=e.radius;t.shadowMapSize=e.mapSize;a.directionalShadow[l]=t;a.directionalShadowMap[l]=x;a.directionalShadowMatrix[l]=E.shadow.matrix;p++}a.directional[l]=e;l++}else if(E.isSpotLight){const e=t.get(E);e.position.setFromMatrixPosition(E.matrixWorld);e.color.copy(S).multiplyScalar(T);e.distance=M;e.coneCos=Math.cos(E.angle);e.penumbraCos=Math.cos(E.angle*(1-E.penumbra));e.decay=E.decay;a.spot[d]=e;const r=E.shadow;if(E.map){a.spotLightMap[_]=E.map;_++;r.updateMatrices(E);E.castShadow&&g++}a.spotLightMatrix[d]=r.matrix;if(E.castShadow){const e=n.get(E);e.shadowIntensity=r.intensity;e.shadowBias=r.bias;e.shadowNormalBias=r.normalBias;e.shadowRadius=r.radius;e.shadowMapSize=r.mapSize;a.spotShadow[d]=e;a.spotShadowMap[d]=x;h++}d++}else if(E.isRectAreaLight){const e=t.get(E);e.color.copy(S).multiplyScalar(T);e.halfWidth.set(E.width*.5,0,0);e.halfHeight.set(0,E.height*.5,0);a.rectArea[u]=e;u++}else if(E.isPointLight){const e=t.get(E);e.color.copy(E.color).multiplyScalar(E.intensity);e.distance=E.distance;e.decay=E.decay;if(E.castShadow){const e=E.shadow;const t=n.get(E);t.shadowIntensity=e.intensity;t.shadowBias=e.bias;t.shadowNormalBias=e.normalBias;t.shadowRadius=e.radius;t.shadowMapSize=e.mapSize;t.shadowCameraNear=e.camera.near;t.shadowCameraFar=e.camera.far;a.pointShadow[c]=t;a.pointShadowMap[c]=x;a.pointShadowMatrix[c]=E.shadow.matrix;m++}a.point[c]=e;c++}else if(E.isHemisphereLight){const e=t.get(E);e.skyColor.copy(E.color).multiplyScalar(T);e.groundColor.copy(E.groundColor).multiplyScalar(T);a.hemi[f]=e;f++}}if(u>0)if(e.has("OES_texture_float_linear")===true){a.rectAreaLTC1=Zi.LTC_FLOAT_1;a.rectAreaLTC2=Zi.LTC_FLOAT_2}else{a.rectAreaLTC1=Zi.LTC_HALF_1;a.rectAreaLTC2=Zi.LTC_HALF_2}a.ambient[0]=i;a.ambient[1]=o;a.ambient[2]=s;const E=a.hash;if(E.directionalLength!==l||E.pointLength!==c||E.spotLength!==d||E.rectAreaLength!==u||E.hemiLength!==f||E.numDirectionalShadows!==p||E.numPointShadows!==m||E.numSpotShadows!==h||E.numSpotMaps!==_||E.numLightProbes!==v){a.directional.length=l;a.spot.length=d;a.rectArea.length=u;a.point.length=c;a.hemi.length=f;a.directionalShadow.length=p;a.directionalShadowMap.length=p;a.pointShadow.length=m;a.pointShadowMap.length=m;a.spotShadow.length=h;a.spotShadowMap.length=h;a.directionalShadowMatrix.length=p;a.pointShadowMatrix.length=m;a.spotLightMatrix.length=h+_-g;a.spotLightMap.length=_;a.numSpotLightShadowsWithMaps=g;a.numLightProbes=v;E.directionalLength=l;E.pointLength=c;E.spotLength=d;E.rectAreaLength=u;E.hemiLength=f;E.numDirectionalShadows=p;E.numPointShadows=m;E.numSpotShadows=h;E.numSpotMaps=_;E.numLightProbes=v;a.version=yl++}}function c(e,t){let n=0;let s=0;let l=0;let c=0;let d=0;const u=t.matrixWorldInverse;for(let t=0,f=e.length;t<f;t++){const f=e[t];if(f.isDirectionalLight){const e=a.directional[n];e.direction.setFromMatrixPosition(f.matrixWorld);r.setFromMatrixPosition(f.target.matrixWorld);e.direction.sub(r);e.direction.transformDirection(u);n++}else if(f.isSpotLight){const e=a.spot[l];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(u);e.direction.setFromMatrixPosition(f.matrixWorld);r.setFromMatrixPosition(f.target.matrixWorld);e.direction.sub(r);e.direction.transformDirection(u);l++}else if(f.isRectAreaLight){const e=a.rectArea[c];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(u);o.identity();i.copy(f.matrixWorld);i.premultiply(u);o.extractRotation(i);e.halfWidth.set(f.width*.5,0,0);e.halfHeight.set(0,f.height*.5,0);e.halfWidth.applyMatrix4(o);e.halfHeight.applyMatrix4(o);c++}else if(f.isPointLight){const e=a.point[s];e.position.setFromMatrixPosition(f.matrixWorld);e.position.applyMatrix4(u);s++}else if(f.isHemisphereLight){const e=a.hemi[d];e.direction.setFromMatrixPosition(f.matrixWorld);e.direction.transformDirection(u);d++}}}return{setup:s,setupView:c,state:a}}function Ol(e){const t=new Nl(e);const n=[];const a=[];function r(e){c.camera=e;n.length=0;a.length=0}function i(e){n.push(e)}function o(e){a.push(e)}function s(){t.setup(n)}function l(e){t.setupView(n,e)}const c={lightsArray:n,shadowsArray:a,camera:null,lights:t,transmissionRenderTarget:{}};return{init:r,state:c,setupLights:s,setupLightsView:l,pushLight:i,pushShadow:o}}function Fl(e){let t=new WeakMap;function n(n,a=0){const r=t.get(n);let i;if(r===void 0){i=new Ol(e);t.set(n,[i])}else if(a>=r.length){i=new Ol(e);r.push(i)}else i=r[a];return i}function a(){t=new WeakMap}return{get:n,dispose:a}}const Bl="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const Hl="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function Gl(e,t,n){let r=new He;const i=new a,o=new a,s=new le,l=new Ge({depthPacking:Ve}),c=new ze,d={},u=n.maxTextureSize;const f={[L]:E,[E]:L,[Ie]:Ie};const m=new g({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new a},radius:{value:4}},vertexShader:Bl,fragmentShader:Hl});const h=m.clone();h.defines.HORIZONTAL_PASS=1;const _=new Q;_.setAttribute("position",new J(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new p(_,m);const S=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=be;let T=this.type;this.render=function(t,n,a){if(S.enabled===false)return;if(S.autoUpdate===false&&S.needsUpdate===false)return;if(t.length===0)return;const l=e.getRenderTarget();const c=e.getActiveCubeFace();const d=e.getActiveMipmapLevel();const f=e.state;f.setBlending(ne);f.buffers.color.setClear(1,1,1,1);f.buffers.depth.setTest(true);f.setScissorTest(false);const p=T!==Le&&this.type===Le;const m=T===Le&&this.type!==Le;for(let l=0,c=t.length;l<c;l++){const c=t[l];const d=c.shadow;if(d===void 0){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(d.autoUpdate===false&&d.needsUpdate===false)continue;i.copy(d.mapSize);const h=d.getFrameExtents();i.multiply(h);o.copy(d.mapSize);if(i.x>u||i.y>u){if(i.x>u){o.x=Math.floor(u/h.x);i.x=o.x*h.x;d.mapSize.x=o.x}if(i.y>u){o.y=Math.floor(u/h.y);i.y=o.y*h.y;d.mapSize.y=o.y}}if(d.map===null||p===true||m===true){const e=this.type!==Le?{minFilter:ke,magFilter:ke}:{};d.map!==null&&d.map.dispose();d.map=new te(i.x,i.y,e);d.map.texture.name=c.name+".shadowMap";d.camera.updateProjectionMatrix()}e.setRenderTarget(d.map);e.clear();const _=d.getViewportCount();for(let e=0;e<_;e++){const t=d.getViewport(e);s.set(o.x*t.x,o.y*t.y,o.x*t.z,o.y*t.w);f.viewport(s);d.updateMatrices(c,e);r=d.getFrustum();R(n,a,d.camera,c,this.type)}d.isPointLightShadow!==true&&this.type===Le&&M(d,a);d.needsUpdate=false}T=this.type;S.needsUpdate=false;e.setRenderTarget(l,c,d)};function M(n,a){const r=t.update(v);if(m.defines.VSM_SAMPLES!==n.blurSamples){m.defines.VSM_SAMPLES=n.blurSamples;h.defines.VSM_SAMPLES=n.blurSamples;m.needsUpdate=true;h.needsUpdate=true}n.mapPass===null&&(n.mapPass=new te(i.x,i.y));m.uniforms.shadow_pass.value=n.map.texture;m.uniforms.resolution.value=n.mapSize;m.uniforms.radius.value=n.radius;e.setRenderTarget(n.mapPass);e.clear();e.renderBufferDirect(a,null,r,m,v,null);h.uniforms.shadow_pass.value=n.mapPass.texture;h.uniforms.resolution.value=n.mapSize;h.uniforms.radius.value=n.radius;e.setRenderTarget(n.map);e.clear();e.renderBufferDirect(a,null,r,h,v,null)}function x(t,n,a,r){let i=null;const o=a.isPointLight===true?t.customDistanceMaterial:t.customDepthMaterial;if(o!==void 0)i=o;else{i=a.isPointLight===true?c:l;if(e.localClippingEnabled&&n.clipShadows===true&&Array.isArray(n.clippingPlanes)&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0||n.alphaToCoverage===true){const e=i.uuid,t=n.uuid;let a=d[e];if(a===void 0){a={};d[e]=a}let r=a[t];if(r===void 0){r=i.clone();a[t]=r;n.addEventListener("dispose",A)}i=r}}i.visible=n.visible;i.wireframe=n.wireframe;i.side=r===Le?n.shadowSide!==null?n.shadowSide:n.side:n.shadowSide!==null?n.shadowSide:f[n.side];i.alphaMap=n.alphaMap;i.alphaTest=n.alphaToCoverage===true?.5:n.alphaTest;i.map=n.map;i.clipShadows=n.clipShadows;i.clippingPlanes=n.clippingPlanes;i.clipIntersection=n.clipIntersection;i.displacementMap=n.displacementMap;i.displacementScale=n.displacementScale;i.displacementBias=n.displacementBias;i.wireframeLinewidth=n.wireframeLinewidth;i.linewidth=n.linewidth;if(a.isPointLight===true&&i.isMeshDistanceMaterial===true){const t=e.properties.get(i);t.light=a}return i}function R(n,a,i,o,s){if(n.visible===false)return;const l=n.layers.test(a.layers);if(l&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===Le)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,n.matrixWorld);const r=t.update(n);const l=n.material;if(Array.isArray(l)){const t=r.groups;for(let c=0,d=t.length;c<d;c++){const d=t[c];const u=l[d.materialIndex];if(u&&u.visible){const t=x(n,u,o,s);n.onBeforeShadow(e,n,a,i,r,t,d);e.renderBufferDirect(i,null,r,t,n,d);n.onAfterShadow(e,n,a,i,r,t,d)}}}else if(l.visible){const t=x(n,l,o,s);n.onBeforeShadow(e,n,a,i,r,t,null);e.renderBufferDirect(i,null,r,t,n,null);n.onAfterShadow(e,n,a,i,r,t,null)}}const c=n.children;for(let e=0,t=c.length;e<t;e++)R(c[e],a,i,o,s)}function A(e){const t=e.target;t.removeEventListener("dispose",A);for(const t in d){const n=d[t];const a=e.target.uuid;if(a in n){const e=n[a];e.dispose();delete n[a]}}}}const Vl={[$e]:Ze,[qe]:je,[Ke]:Ye,[Xe]:We,[Ze]:$e,[je]:qe,[Ye]:Ke,[We]:Xe};function zl(e,t){function n(){let t=false;const n=new le;let a=null;const r=new le(0,0,0,0);return{setMask:function(n){if(a!==n&&!t){e.colorMask(n,n,n,n);a=n}},setLocked:function(e){t=e},setClear:function(t,a,i,o,s){if(s===true){t*=o;a*=o;i*=o}n.set(t,a,i,o);if(r.equals(n)===false){e.clearColor(t,a,i,o);r.copy(n)}},reset:function(){t=false;a=null;r.set(-1,0,0,0)}}}function a(){let n=false;let a=false;let r=null;let i=null;let o=null;return{setReversed:function(e){if(a!==e){const n=t.get("EXT_clip_control");e?n.clipControlEXT(n.LOWER_LEFT_EXT,n.ZERO_TO_ONE_EXT):n.clipControlEXT(n.LOWER_LEFT_EXT,n.NEGATIVE_ONE_TO_ONE_EXT);a=e;const r=o;o=null;this.setClear(r)}},getReversed:function(){return a},setTest:function(t){t?X(e.DEPTH_TEST):Y(e.DEPTH_TEST)},setMask:function(t){if(r!==t&&!n){e.depthMask(t);r=t}},setFunc:function(t){a&&(t=Vl[t]);if(i!==t){switch(t){case $e:e.depthFunc(e.NEVER);break;case Ze:e.depthFunc(e.ALWAYS);break;case qe:e.depthFunc(e.LESS);break;case Xe:e.depthFunc(e.LEQUAL);break;case Ke:e.depthFunc(e.EQUAL);break;case We:e.depthFunc(e.GEQUAL);break;case je:e.depthFunc(e.GREATER);break;case Ye:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}i=t}},setLocked:function(e){n=e},setClear:function(t){if(o!==t){a&&(t=1-t);e.clearDepth(t);o=t}},reset:function(){n=false;r=null;i=null;o=null;a=false}}}function r(){let t=false;let n=null;let a=null;let r=null;let i=null;let o=null;let s=null;let l=null;let c=null;return{setTest:function(n){t||(n?X(e.STENCIL_TEST):Y(e.STENCIL_TEST))},setMask:function(a){if(n!==a&&!t){e.stencilMask(a);n=a}},setFunc:function(t,n,o){if(a!==t||r!==n||i!==o){e.stencilFunc(t,n,o);a=t;r=n;i=o}},setOp:function(t,n,a){if(o!==t||s!==n||l!==a){e.stencilOp(t,n,a);o=t;s=n;l=a}},setLocked:function(e){t=e},setClear:function(t){if(c!==t){e.clearStencil(t);c=t}},reset:function(){t=false;n=null;a=null;r=null;i=null;o=null;s=null;l=null;c=null}}}const i=new n;const s=new a;const l=new r;const c=new WeakMap;const d=new WeakMap;let u={};let f={};let p=new WeakMap;let m=[];let h=null;let _=false;let g=null;let v=null;let S=null;let T=null;let M=null;let x=null;let R=null;let A=new o(0,0,0);let b=0;let C=false;let L=null;let P=null;let U=null;let w=null;let D=null;const y=e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let I=false;let N=0;const O=e.getParameter(e.VERSION);if(O.indexOf("WebGL")!==-1){N=parseFloat(/^WebGL (\d)/.exec(O)[1]);I=N>=1}else if(O.indexOf("OpenGL ES")!==-1){N=parseFloat(/^OpenGL ES (\d)/.exec(O)[1]);I=N>=2}let F=null;let B={};const H=e.getParameter(e.SCISSOR_BOX);const G=e.getParameter(e.VIEWPORT);const V=(new le).fromArray(H);const z=(new le).fromArray(G);function k(t,n,a,r){const i=new Uint8Array(4);const o=e.createTexture();e.bindTexture(t,o);e.texParameteri(t,e.TEXTURE_MIN_FILTER,e.NEAREST);e.texParameteri(t,e.TEXTURE_MAG_FILTER,e.NEAREST);for(let o=0;o<a;o++)t===e.TEXTURE_3D||t===e.TEXTURE_2D_ARRAY?e.texImage3D(n,0,e.RGBA,1,1,r,0,e.RGBA,e.UNSIGNED_BYTE,i):e.texImage2D(n+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return o}const W={};W[e.TEXTURE_2D]=k(e.TEXTURE_2D,e.TEXTURE_2D,1);W[e.TEXTURE_CUBE_MAP]=k(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6);W[e.TEXTURE_2D_ARRAY]=k(e.TEXTURE_2D_ARRAY,e.TEXTURE_2D_ARRAY,1,1);W[e.TEXTURE_3D]=k(e.TEXTURE_3D,e.TEXTURE_3D,1,1);i.setClear(0,0,0,1);s.setClear(1);l.setClear(0);X(e.DEPTH_TEST);s.setFunc(Xe);ee(false);te(Qe);X(e.CULL_FACE);Q(ne);function X(t){if(u[t]!==true){e.enable(t);u[t]=true}}function Y(t){if(u[t]!==false){e.disable(t);u[t]=false}}function K(t,n){if(f[t]!==n){e.bindFramebuffer(t,n);f[t]=n;t===e.DRAW_FRAMEBUFFER&&(f[e.FRAMEBUFFER]=n);t===e.FRAMEBUFFER&&(f[e.DRAW_FRAMEBUFFER]=n);return true}return false}function j(t,n){let a=m;let r=false;if(t){a=p.get(n);if(a===void 0){a=[];p.set(n,a)}const i=t.textures;if(a.length!==i.length||a[0]!==e.COLOR_ATTACHMENT0){for(let t=0,n=i.length;t<n;t++)a[t]=e.COLOR_ATTACHMENT0+t;a.length=i.length;r=true}}else if(a[0]!==e.BACK){a[0]=e.BACK;r=true}r&&e.drawBuffers(a)}function q(t){if(h!==t){e.useProgram(t);h=t;return true}return false}const Z={[tt]:e.FUNC_ADD,[et]:e.FUNC_SUBTRACT,[Je]:e.FUNC_REVERSE_SUBTRACT};Z[nt]=e.MIN;Z[at]=e.MAX;const $={[Tt]:e.ZERO,[St]:e.ONE,[Et]:e.SRC_COLOR,[vt]:e.SRC_ALPHA,[gt]:e.SRC_ALPHA_SATURATE,[_t]:e.DST_COLOR,[ht]:e.DST_ALPHA,[mt]:e.ONE_MINUS_SRC_COLOR,[pt]:e.ONE_MINUS_SRC_ALPHA,[ut]:e.ONE_MINUS_DST_COLOR,[lt]:e.ONE_MINUS_DST_ALPHA,[st]:e.CONSTANT_COLOR,[ot]:e.ONE_MINUS_CONSTANT_COLOR,[it]:e.CONSTANT_ALPHA,[rt]:e.ONE_MINUS_CONSTANT_ALPHA};function Q(t,n,a,r,i,o,s,l,c,d){if(t!==ne){if(_===false){X(e.BLEND);_=true}if(t===Mt){i=i||n;o=o||a;s=s||r;if(n!==v||i!==M){e.blendEquationSeparate(Z[n],Z[i]);v=n;M=i}if(a!==S||r!==T||o!==x||s!==R){e.blendFuncSeparate($[a],$[r],$[o],$[s]);S=a;T=r;x=o;R=s}if(l.equals(A)===false||c!==b){e.blendColor(l.r,l.g,l.b,c);A.copy(l);b=c}g=t;C=false}else if(t!==g||d!==C){if(v!==tt||M!==tt){e.blendEquation(e.FUNC_ADD);v=tt;M=tt}if(d)switch(t){case Ne:e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case At:e.blendFunc(e.ONE,e.ONE);break;case Rt:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case xt:e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}else switch(t){case Ne:e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA);break;case At:e.blendFunc(e.SRC_ALPHA,e.ONE);break;case Rt:e.blendFuncSeparate(e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ZERO,e.ONE);break;case xt:e.blendFunc(e.ZERO,e.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",t);break}S=null;T=null;x=null;R=null;A.set(0,0,0);b=0;g=t;C=d}}else if(_===true){Y(e.BLEND);_=false}}function J(t,n){t.side===Ie?Y(e.CULL_FACE):X(e.CULL_FACE);let a=t.side===E;n&&(a=!a);ee(a);t.blending===Ne&&t.transparent===false?Q(ne):Q(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.blendColor,t.blendAlpha,t.premultipliedAlpha);s.setFunc(t.depthFunc);s.setTest(t.depthTest);s.setMask(t.depthWrite);i.setMask(t.colorWrite);const r=t.stencilWrite;l.setTest(r);if(r){l.setMask(t.stencilWriteMask);l.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask);l.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)}re(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits);t.alphaToCoverage===true?X(e.SAMPLE_ALPHA_TO_COVERAGE):Y(e.SAMPLE_ALPHA_TO_COVERAGE)}function ee(t){if(L!==t){t?e.frontFace(e.CW):e.frontFace(e.CCW);L=t}}function te(t){if(t!==bt){X(e.CULL_FACE);t!==P&&(t===Qe?e.cullFace(e.BACK):t===Ct?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))}else Y(e.CULL_FACE);P=t}function ae(t){if(t!==U){I&&e.lineWidth(t);U=t}}function re(t,n,a){if(t){X(e.POLYGON_OFFSET_FILL);if(w!==n||D!==a){e.polygonOffset(n,a);w=n;D=a}}else Y(e.POLYGON_OFFSET_FILL)}function ie(t){t?X(e.SCISSOR_TEST):Y(e.SCISSOR_TEST)}function oe(t){t===void 0&&(t=e.TEXTURE0+y-1);if(F!==t){e.activeTexture(t);F=t}}function se(t,n,a){a===void 0&&(a=F===null?e.TEXTURE0+y-1:F);let r=B[a];if(r===void 0){r={type:void 0,texture:void 0};B[a]=r}if(r.type!==t||r.texture!==n){if(F!==a){e.activeTexture(a);F=a}e.bindTexture(t,n||W[t]);r.type=t;r.texture=n}}function ce(){const t=B[F];if(t!==void 0&&t.type!==void 0){e.bindTexture(t.type,null);t.type=void 0;t.texture=void 0}}function de(){try{e.compressedTexImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ue(){try{e.compressedTexImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function fe(){try{e.texSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function pe(){try{e.texSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function me(){try{e.compressedTexSubImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function he(){try{e.compressedTexSubImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function _e(){try{e.texStorage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ge(){try{e.texStorage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function ve(){try{e.texImage2D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function Ee(){try{e.texImage3D(...arguments)}catch(e){console.error("THREE.WebGLState:",e)}}function Se(t){if(V.equals(t)===false){e.scissor(t.x,t.y,t.z,t.w);V.copy(t)}}function Te(t){if(z.equals(t)===false){e.viewport(t.x,t.y,t.z,t.w);z.copy(t)}}function Me(t,n){let a=d.get(n);if(a===void 0){a=new WeakMap;d.set(n,a)}let r=a.get(t);if(r===void 0){r=e.getUniformBlockIndex(n,t.name);a.set(t,r)}}function xe(t,n){const a=d.get(n);const r=a.get(t);if(c.get(n)!==r){e.uniformBlockBinding(n,r,t.__bindingPointIndex);c.set(n,r)}}function Re(){e.disable(e.BLEND);e.disable(e.CULL_FACE);e.disable(e.DEPTH_TEST);e.disable(e.POLYGON_OFFSET_FILL);e.disable(e.SCISSOR_TEST);e.disable(e.STENCIL_TEST);e.disable(e.SAMPLE_ALPHA_TO_COVERAGE);e.blendEquation(e.FUNC_ADD);e.blendFunc(e.ONE,e.ZERO);e.blendFuncSeparate(e.ONE,e.ZERO,e.ONE,e.ZERO);e.blendColor(0,0,0,0);e.colorMask(true,true,true,true);e.clearColor(0,0,0,0);e.depthMask(true);e.depthFunc(e.LESS);s.setReversed(false);e.clearDepth(1);e.stencilMask(4294967295);e.stencilFunc(e.ALWAYS,0,4294967295);e.stencilOp(e.KEEP,e.KEEP,e.KEEP);e.clearStencil(0);e.cullFace(e.BACK);e.frontFace(e.CCW);e.polygonOffset(0,0);e.activeTexture(e.TEXTURE0);e.bindFramebuffer(e.FRAMEBUFFER,null);e.bindFramebuffer(e.DRAW_FRAMEBUFFER,null);e.bindFramebuffer(e.READ_FRAMEBUFFER,null);e.useProgram(null);e.lineWidth(1);e.scissor(0,0,e.canvas.width,e.canvas.height);e.viewport(0,0,e.canvas.width,e.canvas.height);u={};F=null;B={};f={};p=new WeakMap;m=[];h=null;_=false;g=null;v=null;S=null;T=null;M=null;x=null;R=null;A=new o(0,0,0);b=0;C=false;L=null;P=null;U=null;w=null;D=null;V.set(0,0,e.canvas.width,e.canvas.height);z.set(0,0,e.canvas.width,e.canvas.height);i.reset();s.reset();l.reset()}return{buffers:{color:i,depth:s,stencil:l},enable:X,disable:Y,bindFramebuffer:K,drawBuffers:j,useProgram:q,setBlending:Q,setMaterial:J,setFlipSided:ee,setCullFace:te,setLineWidth:ae,setPolygonOffset:re,setScissorTest:ie,activeTexture:oe,bindTexture:se,unbindTexture:ce,compressedTexImage2D:de,compressedTexImage3D:ue,texImage2D:ve,texImage3D:Ee,updateUBOMapping:Me,uniformBlockBinding:xe,texStorage2D:_e,texStorage3D:ge,texSubImage2D:fe,texSubImage3D:pe,compressedTexSubImage2D:me,compressedTexSubImage3D:he,scissor:Se,viewport:Te,reset:Re}}function kl(e,t,n,r,i,o,s){const l=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null;const c=typeof navigator!=="undefined"&&/OculusBrowser/g.test(navigator.userAgent);const d=new a;const u=new WeakMap;let f;const p=new WeakMap;let m=false;try{m=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(e){}function h(e,t){return m?new OffscreenCanvas(e,t):Lt("canvas")}function _(e,t,n){let a=1;const r=de(e);(r.width>n||r.height>n)&&(a=n/Math.max(r.width,r.height));if(a<1){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){const n=Math.floor(a*r.width);const i=Math.floor(a*r.height);f===void 0&&(f=h(n,i));const o=t?h(n,i):f;o.width=n;o.height=i;const s=o.getContext("2d");s.drawImage(e,0,0,n,i);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+n+"x"+i+").");return o}"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+").");return e}return e}function g(e){return e.generateMipmaps}function v(t){e.generateMipmap(t)}function E(t){return t.isWebGLCubeRenderTarget?e.TEXTURE_CUBE_MAP:t.isWebGL3DRenderTarget?e.TEXTURE_3D:t.isWebGLArrayRenderTarget||t.isCompressedArrayTexture?e.TEXTURE_2D_ARRAY:e.TEXTURE_2D}function S(n,a,r,i,o=false){if(n!==null){if(e[n]!==void 0)return e[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let s=a;if(a===e.RED){r===e.FLOAT&&(s=e.R32F);r===e.HALF_FLOAT&&(s=e.R16F);r===e.UNSIGNED_BYTE&&(s=e.R8)}if(a===e.RED_INTEGER){r===e.UNSIGNED_BYTE&&(s=e.R8UI);r===e.UNSIGNED_SHORT&&(s=e.R16UI);r===e.UNSIGNED_INT&&(s=e.R32UI);r===e.BYTE&&(s=e.R8I);r===e.SHORT&&(s=e.R16I);r===e.INT&&(s=e.R32I)}if(a===e.RG){r===e.FLOAT&&(s=e.RG32F);r===e.HALF_FLOAT&&(s=e.RG16F);r===e.UNSIGNED_BYTE&&(s=e.RG8)}if(a===e.RG_INTEGER){r===e.UNSIGNED_BYTE&&(s=e.RG8UI);r===e.UNSIGNED_SHORT&&(s=e.RG16UI);r===e.UNSIGNED_INT&&(s=e.RG32UI);r===e.BYTE&&(s=e.RG8I);r===e.SHORT&&(s=e.RG16I);r===e.INT&&(s=e.RG32I)}if(a===e.RGB_INTEGER){r===e.UNSIGNED_BYTE&&(s=e.RGB8UI);r===e.UNSIGNED_SHORT&&(s=e.RGB16UI);r===e.UNSIGNED_INT&&(s=e.RGB32UI);r===e.BYTE&&(s=e.RGB8I);r===e.SHORT&&(s=e.RGB16I);r===e.INT&&(s=e.RGB32I)}if(a===e.RGBA_INTEGER){r===e.UNSIGNED_BYTE&&(s=e.RGBA8UI);r===e.UNSIGNED_SHORT&&(s=e.RGBA16UI);r===e.UNSIGNED_INT&&(s=e.RGBA32UI);r===e.BYTE&&(s=e.RGBA8I);r===e.SHORT&&(s=e.RGBA16I);r===e.INT&&(s=e.RGBA32I)}a===e.RGB&&r===e.UNSIGNED_INT_5_9_9_9_REV&&(s=e.RGB9_E5);if(a===e.RGBA){const t=o?ve:T.getTransfer(i);r===e.FLOAT&&(s=e.RGBA32F);r===e.HALF_FLOAT&&(s=e.RGBA16F);r===e.UNSIGNED_BYTE&&(s=t===b?e.SRGB8_ALPHA8:e.RGBA8);r===e.UNSIGNED_SHORT_4_4_4_4&&(s=e.RGBA4);r===e.UNSIGNED_SHORT_5_5_5_1&&(s=e.RGB5_A1)}s!==e.R16F&&s!==e.R32F&&s!==e.RG16F&&s!==e.RG32F&&s!==e.RGBA16F&&s!==e.RGBA32F||t.get("EXT_color_buffer_float");return s}function M(t,n){let a;if(t){if(n===null||n===Pt||n===Ut)a=e.DEPTH24_STENCIL8;else if(n===B)a=e.DEPTH32F_STENCIL8;else if(n===wt){a=e.DEPTH24_STENCIL8;console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")}}else n===null||n===Pt||n===Ut?a=e.DEPTH_COMPONENT24:n===B?a=e.DEPTH_COMPONENT32F:n===wt&&(a=e.DEPTH_COMPONENT16);return a}function x(e,t){return g(e)===true||e.isFramebufferTexture&&e.minFilter!==ke&&e.minFilter!==K?Math.log2(Math.max(t.width,t.height))+1:e.mipmaps!==void 0&&e.mipmaps.length>0?e.mipmaps.length:e.isCompressedTexture&&Array.isArray(e.image)?t.mipmaps.length:1}function R(e){const t=e.target;t.removeEventListener("dispose",R);C(t);t.isVideoTexture&&u.delete(t)}function A(e){const t=e.target;t.removeEventListener("dispose",A);P(t)}function C(e){const t=r.get(e);if(t.__webglInit===void 0)return;const n=e.source;const a=p.get(n);if(a){const r=a[t.__cacheKey];r.usedTimes--;r.usedTimes===0&&L(e);Object.keys(a).length===0&&p.delete(n)}r.remove(e)}function L(t){const n=r.get(t);e.deleteTexture(n.__webglTexture);const a=t.source;const i=p.get(a);delete i[n.__cacheKey];s.memory.textures--}function P(t){const n=r.get(t);if(t.depthTexture){t.depthTexture.dispose();r.remove(t.depthTexture)}if(t.isWebGLCubeRenderTarget)for(let t=0;t<6;t++){if(Array.isArray(n.__webglFramebuffer[t]))for(let a=0;a<n.__webglFramebuffer[t].length;a++)e.deleteFramebuffer(n.__webglFramebuffer[t][a]);else e.deleteFramebuffer(n.__webglFramebuffer[t]);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer[t])}else{if(Array.isArray(n.__webglFramebuffer))for(let t=0;t<n.__webglFramebuffer.length;t++)e.deleteFramebuffer(n.__webglFramebuffer[t]);else e.deleteFramebuffer(n.__webglFramebuffer);n.__webglDepthbuffer&&e.deleteRenderbuffer(n.__webglDepthbuffer);n.__webglMultisampledFramebuffer&&e.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer)for(let t=0;t<n.__webglColorRenderbuffer.length;t++)n.__webglColorRenderbuffer[t]&&e.deleteRenderbuffer(n.__webglColorRenderbuffer[t]);n.__webglDepthRenderbuffer&&e.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const a=t.textures;for(let t=0,n=a.length;t<n;t++){const n=r.get(a[t]);if(n.__webglTexture){e.deleteTexture(n.__webglTexture);s.memory.textures--}r.remove(a[t])}r.remove(t)}let U=0;function w(){U=0}function D(){const e=U;e>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+i.maxTextures);U+=1;return e}function y(e){const t=[];t.push(e.wrapS);t.push(e.wrapT);t.push(e.wrapR||0);t.push(e.magFilter);t.push(e.minFilter);t.push(e.anisotropy);t.push(e.internalFormat);t.push(e.format);t.push(e.type);t.push(e.generateMipmaps);t.push(e.premultiplyAlpha);t.push(e.flipY);t.push(e.unpackAlignment);t.push(e.colorSpace);return t.join()}function I(t,a){const i=r.get(t);t.isVideoTexture&&le(t);if(t.isRenderTargetTexture===false&&t.version>0&&i.__version!==t.version){const e=t.image;if(e===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(e.complete!==false){j(i,t,a);return}console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(e.TEXTURE_2D,i.__webglTexture,e.TEXTURE0+a)}function O(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?j(i,t,a):n.bindTexture(e.TEXTURE_2D_ARRAY,i.__webglTexture,e.TEXTURE0+a)}function H(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?j(i,t,a):n.bindTexture(e.TEXTURE_3D,i.__webglTexture,e.TEXTURE0+a)}function G(t,a){const i=r.get(t);t.version>0&&i.__version!==t.version?q(i,t,a):n.bindTexture(e.TEXTURE_CUBE_MAP,i.__webglTexture,e.TEXTURE0+a)}const V={[It]:e.REPEAT,[yt]:e.CLAMP_TO_EDGE,[Dt]:e.MIRRORED_REPEAT};const z={[ke]:e.NEAREST,[Bt]:e.NEAREST_MIPMAP_NEAREST,[Ft]:e.NEAREST_MIPMAP_LINEAR,[K]:e.LINEAR,[Ot]:e.LINEAR_MIPMAP_NEAREST,[Nt]:e.LINEAR_MIPMAP_LINEAR};const k={[Xt]:e.NEVER,[Wt]:e.ALWAYS,[kt]:e.LESS,[ge]:e.LEQUAL,[zt]:e.EQUAL,[Vt]:e.GEQUAL,[Gt]:e.GREATER,[Ht]:e.NOTEQUAL};function W(n,a){a.type!==B||t.has("OES_texture_float_linear")!==false||a.magFilter!==K&&a.magFilter!==Ot&&a.magFilter!==Ft&&a.magFilter!==Nt&&a.minFilter!==K&&a.minFilter!==Ot&&a.minFilter!==Ft&&a.minFilter!==Nt||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");e.texParameteri(n,e.TEXTURE_WRAP_S,V[a.wrapS]);e.texParameteri(n,e.TEXTURE_WRAP_T,V[a.wrapT]);n!==e.TEXTURE_3D&&n!==e.TEXTURE_2D_ARRAY||e.texParameteri(n,e.TEXTURE_WRAP_R,V[a.wrapR]);e.texParameteri(n,e.TEXTURE_MAG_FILTER,z[a.magFilter]);e.texParameteri(n,e.TEXTURE_MIN_FILTER,z[a.minFilter]);if(a.compareFunction){e.texParameteri(n,e.TEXTURE_COMPARE_MODE,e.COMPARE_REF_TO_TEXTURE);e.texParameteri(n,e.TEXTURE_COMPARE_FUNC,k[a.compareFunction])}if(t.has("EXT_texture_filter_anisotropic")===true){if(a.magFilter===ke)return;if(a.minFilter!==Ft&&a.minFilter!==Nt)return;if(a.type===B&&t.has("OES_texture_float_linear")===false)return;if(a.anisotropy>1||r.get(a).__currentAnisotropy){const o=t.get("EXT_texture_filter_anisotropic");e.texParameterf(n,o.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy()));r.get(a).__currentAnisotropy=a.anisotropy}}}function X(t,n){let a=false;if(t.__webglInit===void 0){t.__webglInit=true;n.addEventListener("dispose",R)}const r=n.source;let i=p.get(r);if(i===void 0){i={};p.set(r,i)}const o=y(n);if(o!==t.__cacheKey){if(i[o]===void 0){i[o]={texture:e.createTexture(),usedTimes:0};s.memory.textures++;a=true}i[o].usedTimes++;const r=i[t.__cacheKey];if(r!==void 0){i[t.__cacheKey].usedTimes--;r.usedTimes===0&&L(n)}t.__cacheKey=o;t.__webglTexture=i[o].texture}return a}function j(t,a,s){let l=e.TEXTURE_2D;(a.isDataArrayTexture||a.isCompressedArrayTexture)&&(l=e.TEXTURE_2D_ARRAY);a.isData3DTexture&&(l=e.TEXTURE_3D);const c=X(t,a);const d=a.source;n.bindTexture(l,t.__webglTexture,e.TEXTURE0+s);const u=r.get(d);if(d.version!==u.__version||c===true){n.activeTexture(e.TEXTURE0+s);const t=T.getPrimaries(T.workingColorSpace);const r=a.colorSpace===Yt?null:T.getPrimaries(a.colorSpace);const f=a.colorSpace===Yt||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY);e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment);e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,f);let p=_(a.image,false,i.maxTextureSize);p=ce(a,p);const m=o.convert(a.format,a.colorSpace);const h=o.convert(a.type);let E=S(a.internalFormat,m,h,a.colorSpace,a.isVideoTexture);W(l,a);let R;const A=a.mipmaps;const b=a.isVideoTexture!==true;const C=u.__version===void 0||c===true;const L=d.dataReady;const P=x(a,p);if(a.isDepthTexture){E=M(a.format===Kt,a.type);C&&(b?n.texStorage2D(e.TEXTURE_2D,1,E,p.width,p.height):n.texImage2D(e.TEXTURE_2D,0,E,p.width,p.height,0,m,h,null))}else if(a.isDataTexture)if(A.length>0){b&&C&&n.texStorage2D(e.TEXTURE_2D,P,E,A[0].width,A[0].height);for(let t=0,a=A.length;t<a;t++){R=A[t];b?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,R.width,R.height,m,h,R.data):n.texImage2D(e.TEXTURE_2D,t,E,R.width,R.height,0,m,h,R.data)}a.generateMipmaps=false}else if(b){C&&n.texStorage2D(e.TEXTURE_2D,P,E,p.width,p.height);L&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,p.width,p.height,m,h,p.data)}else n.texImage2D(e.TEXTURE_2D,0,E,p.width,p.height,0,m,h,p.data);else if(a.isCompressedTexture)if(a.isCompressedArrayTexture){b&&C&&n.texStorage3D(e.TEXTURE_2D_ARRAY,P,E,A[0].width,A[0].height,p.depth);for(let t=0,r=A.length;t<r;t++){R=A[t];if(a.format!==N)if(m!==null)if(b){if(L)if(a.layerUpdates.size>0){const r=jt(R.width,R.height,a.format,a.type);for(const i of a.layerUpdates){const a=R.data.subarray(i*r/R.data.BYTES_PER_ELEMENT,(i+1)*r/R.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,i,R.width,R.height,1,m,a)}a.clearLayerUpdates()}else n.compressedTexSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,R.width,R.height,p.depth,m,R.data)}else n.compressedTexImage3D(e.TEXTURE_2D_ARRAY,t,E,R.width,R.height,p.depth,0,R.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else b?L&&n.texSubImage3D(e.TEXTURE_2D_ARRAY,t,0,0,0,R.width,R.height,p.depth,m,h,R.data):n.texImage3D(e.TEXTURE_2D_ARRAY,t,E,R.width,R.height,p.depth,0,m,h,R.data)}}else{b&&C&&n.texStorage2D(e.TEXTURE_2D,P,E,A[0].width,A[0].height);for(let t=0,r=A.length;t<r;t++){R=A[t];a.format!==N?m!==null?b?L&&n.compressedTexSubImage2D(e.TEXTURE_2D,t,0,0,R.width,R.height,m,R.data):n.compressedTexImage2D(e.TEXTURE_2D,t,E,R.width,R.height,0,R.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):b?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,R.width,R.height,m,h,R.data):n.texImage2D(e.TEXTURE_2D,t,E,R.width,R.height,0,m,h,R.data)}}else if(a.isDataArrayTexture)if(b){C&&n.texStorage3D(e.TEXTURE_2D_ARRAY,P,E,p.width,p.height,p.depth);if(L)if(a.layerUpdates.size>0){const t=jt(p.width,p.height,a.format,a.type);for(const r of a.layerUpdates){const a=p.data.subarray(r*t/p.data.BYTES_PER_ELEMENT,(r+1)*t/p.data.BYTES_PER_ELEMENT);n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,r,p.width,p.height,1,m,h,a)}a.clearLayerUpdates()}else n.texSubImage3D(e.TEXTURE_2D_ARRAY,0,0,0,0,p.width,p.height,p.depth,m,h,p.data)}else n.texImage3D(e.TEXTURE_2D_ARRAY,0,E,p.width,p.height,p.depth,0,m,h,p.data);else if(a.isData3DTexture)if(b){C&&n.texStorage3D(e.TEXTURE_3D,P,E,p.width,p.height,p.depth);L&&n.texSubImage3D(e.TEXTURE_3D,0,0,0,0,p.width,p.height,p.depth,m,h,p.data)}else n.texImage3D(e.TEXTURE_3D,0,E,p.width,p.height,p.depth,0,m,h,p.data);else if(a.isFramebufferTexture){if(C)if(b)n.texStorage2D(e.TEXTURE_2D,P,E,p.width,p.height);else{let t=p.width,a=p.height;for(let r=0;r<P;r++){n.texImage2D(e.TEXTURE_2D,r,E,t,a,0,m,h,null);t>>=1;a>>=1}}}else if(A.length>0){if(b&&C){const t=de(A[0]);n.texStorage2D(e.TEXTURE_2D,P,E,t.width,t.height)}for(let t=0,a=A.length;t<a;t++){R=A[t];b?L&&n.texSubImage2D(e.TEXTURE_2D,t,0,0,m,h,R):n.texImage2D(e.TEXTURE_2D,t,E,m,h,R)}a.generateMipmaps=false}else if(b){if(C){const t=de(p);n.texStorage2D(e.TEXTURE_2D,P,E,t.width,t.height)}L&&n.texSubImage2D(e.TEXTURE_2D,0,0,0,m,h,p)}else n.texImage2D(e.TEXTURE_2D,0,E,m,h,p);g(a)&&v(l);u.__version=d.version;a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function q(t,a,s){if(a.image.length!==6)return;const l=X(t,a);const c=a.source;n.bindTexture(e.TEXTURE_CUBE_MAP,t.__webglTexture,e.TEXTURE0+s);const d=r.get(c);if(c.version!==d.__version||l===true){n.activeTexture(e.TEXTURE0+s);const t=T.getPrimaries(T.workingColorSpace);const r=a.colorSpace===Yt?null:T.getPrimaries(a.colorSpace);const u=a.colorSpace===Yt||t===r?e.NONE:e.BROWSER_DEFAULT_WEBGL;e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a.flipY);e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);e.pixelStorei(e.UNPACK_ALIGNMENT,a.unpackAlignment);e.pixelStorei(e.UNPACK_COLORSPACE_CONVERSION_WEBGL,u);const f=a.isCompressedTexture||a.image[0].isCompressedTexture;const p=a.image[0]&&a.image[0].isDataTexture;const m=[];for(let e=0;e<6;e++){m[e]=f||p?p?a.image[e].image:a.image[e]:_(a.image[e],true,i.maxCubemapSize);m[e]=ce(a,m[e])}const h=m[0],E=o.convert(a.format,a.colorSpace),M=o.convert(a.type),R=S(a.internalFormat,E,M,a.colorSpace);const A=a.isVideoTexture!==true;const b=d.__version===void 0||l===true;const C=c.dataReady;let L=x(a,h);W(e.TEXTURE_CUBE_MAP,a);let P;if(f){A&&b&&n.texStorage2D(e.TEXTURE_CUBE_MAP,L,R,h.width,h.height);for(let t=0;t<6;t++){P=m[t].mipmaps;for(let r=0;r<P.length;r++){const i=P[r];a.format!==N?E!==null?A?C&&n.compressedTexSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,i.width,i.height,E,i.data):n.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,R,i.width,i.height,0,i.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,0,0,i.width,i.height,E,M,i.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,r,R,i.width,i.height,0,E,M,i.data)}}}else{P=a.mipmaps;if(A&&b){P.length>0&&L++;const t=de(m[0]);n.texStorage2D(e.TEXTURE_CUBE_MAP,L,R,t.width,t.height)}for(let t=0;t<6;t++)if(p){A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,m[t].width,m[t].height,E,M,m[t].data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,R,m[t].width,m[t].height,0,E,M,m[t].data);for(let a=0;a<P.length;a++){const r=P[a];const i=r.image[t].image;A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,a+1,0,0,i.width,i.height,E,M,i.data):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,a+1,R,i.width,i.height,0,E,M,i.data)}}else{A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,E,M,m[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,R,E,M,m[t]);for(let a=0;a<P.length;a++){const r=P[a];A?C&&n.texSubImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,a+1,0,0,E,M,r.image[t]):n.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+t,a+1,R,E,M,r.image[t])}}}g(a)&&v(e.TEXTURE_CUBE_MAP);d.__version=c.version;a.onUpdate&&a.onUpdate(a)}t.__version=a.version}function Z(t,a,i,s,c,d){const u=o.convert(i.format,i.colorSpace);const f=o.convert(i.type);const p=S(i.internalFormat,u,f,i.colorSpace);const m=r.get(a);const h=r.get(i);h.__renderTarget=a;if(!m.__hasExternalTextures){const t=Math.max(1,a.width>>d);const r=Math.max(1,a.height>>d);c===e.TEXTURE_3D||c===e.TEXTURE_2D_ARRAY?n.texImage3D(c,d,p,t,r,a.depth,0,u,f,null):n.texImage2D(c,d,p,t,r,0,u,f,null)}n.bindFramebuffer(e.FRAMEBUFFER,t);se(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,s,c,h.__webglTexture,0,oe(a)):(c===e.TEXTURE_2D||c>=e.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=e.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&e.framebufferTexture2D(e.FRAMEBUFFER,s,c,h.__webglTexture,d);n.bindFramebuffer(e.FRAMEBUFFER,null)}function $(t,n,a){e.bindRenderbuffer(e.RENDERBUFFER,t);if(n.depthBuffer){const r=n.depthTexture;const i=r&&r.isDepthTexture?r.type:null;const o=M(n.stencilBuffer,i);const s=n.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const c=oe(n);const d=se(n);d?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,c,o,n.width,n.height):a?e.renderbufferStorageMultisample(e.RENDERBUFFER,c,o,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,o,n.width,n.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,s,e.RENDERBUFFER,t)}else{const t=n.textures;for(let r=0;r<t.length;r++){const i=t[r];const s=o.convert(i.format,i.colorSpace);const c=o.convert(i.type);const d=S(i.internalFormat,s,c,i.colorSpace);const u=oe(n);a&&se(n)===false?e.renderbufferStorageMultisample(e.RENDERBUFFER,u,d,n.width,n.height):se(n)?l.renderbufferStorageMultisampleEXT(e.RENDERBUFFER,u,d,n.width,n.height):e.renderbufferStorage(e.RENDERBUFFER,d,n.width,n.height)}}e.bindRenderbuffer(e.RENDERBUFFER,null)}function Q(t,a){const i=a&&a.isWebGLCubeRenderTarget;if(i)throw new Error("Depth Texture with cube render targets is not supported");n.bindFramebuffer(e.FRAMEBUFFER,t);if(!(a.depthTexture&&a.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const o=r.get(a.depthTexture);o.__renderTarget=a;if(!o.__webglTexture||a.depthTexture.image.width!==a.width||a.depthTexture.image.height!==a.height){a.depthTexture.image.width=a.width;a.depthTexture.image.height=a.height;a.depthTexture.needsUpdate=true}I(a.depthTexture,0);const s=o.__webglTexture;const c=oe(a);if(a.depthTexture.format===qt)se(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,s,0);else{if(a.depthTexture.format!==Kt)throw new Error("Unknown depthTexture format");se(a)?l.framebufferTexture2DMultisampleEXT(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0,c):e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.TEXTURE_2D,s,0)}}function J(t){const a=r.get(t);const i=t.isWebGLCubeRenderTarget===true;if(a.__boundDepthTexture!==t.depthTexture){const e=t.depthTexture;a.__depthDisposeCallback&&a.__depthDisposeCallback();if(e){const t=()=>{delete a.__boundDepthTexture;delete a.__depthDisposeCallback;e.removeEventListener("dispose",t)};e.addEventListener("dispose",t);a.__depthDisposeCallback=t}a.__boundDepthTexture=e}if(t.depthTexture&&!a.__autoAllocateDepthBuffer){if(i)throw new Error("target.depthTexture not supported in Cube render targets");const e=t.texture.mipmaps;e&&e.length>0?Q(a.__webglFramebuffer[0],t):Q(a.__webglFramebuffer,t)}else if(i){a.__webglDepthbuffer=[];for(let r=0;r<6;r++){n.bindFramebuffer(e.FRAMEBUFFER,a.__webglFramebuffer[r]);if(a.__webglDepthbuffer[r]===void 0){a.__webglDepthbuffer[r]=e.createRenderbuffer();$(a.__webglDepthbuffer[r],t,false)}else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const i=a.__webglDepthbuffer[r];e.bindRenderbuffer(e.RENDERBUFFER,i);e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,i)}}}else{const r=t.texture.mipmaps;r&&r.length>0?n.bindFramebuffer(e.FRAMEBUFFER,a.__webglFramebuffer[0]):n.bindFramebuffer(e.FRAMEBUFFER,a.__webglFramebuffer);if(a.__webglDepthbuffer===void 0){a.__webglDepthbuffer=e.createRenderbuffer();$(a.__webglDepthbuffer,t,false)}else{const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const r=a.__webglDepthbuffer;e.bindRenderbuffer(e.RENDERBUFFER,r);e.framebufferRenderbuffer(e.FRAMEBUFFER,n,e.RENDERBUFFER,r)}}n.bindFramebuffer(e.FRAMEBUFFER,null)}function ee(t,n,a){const i=r.get(t);n!==void 0&&Z(i.__webglFramebuffer,t,t.texture,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,0);a!==void 0&&J(t)}function te(t){const a=t.texture;const i=r.get(t);const l=r.get(a);t.addEventListener("dispose",A);const c=t.textures;const d=t.isWebGLCubeRenderTarget===true;const u=c.length>1;if(!u){l.__webglTexture===void 0&&(l.__webglTexture=e.createTexture());l.__version=a.version;s.memory.textures++}if(d){i.__webglFramebuffer=[];for(let t=0;t<6;t++)if(a.mipmaps&&a.mipmaps.length>0){i.__webglFramebuffer[t]=[];for(let n=0;n<a.mipmaps.length;n++)i.__webglFramebuffer[t][n]=e.createFramebuffer()}else i.__webglFramebuffer[t]=e.createFramebuffer()}else{if(a.mipmaps&&a.mipmaps.length>0){i.__webglFramebuffer=[];for(let t=0;t<a.mipmaps.length;t++)i.__webglFramebuffer[t]=e.createFramebuffer()}else i.__webglFramebuffer=e.createFramebuffer();if(u)for(let t=0,n=c.length;t<n;t++){const n=r.get(c[t]);if(n.__webglTexture===void 0){n.__webglTexture=e.createTexture();s.memory.textures++}}if(t.samples>0&&se(t)===false){i.__webglMultisampledFramebuffer=e.createFramebuffer();i.__webglColorRenderbuffer=[];n.bindFramebuffer(e.FRAMEBUFFER,i.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const a=c[n];i.__webglColorRenderbuffer[n]=e.createRenderbuffer();e.bindRenderbuffer(e.RENDERBUFFER,i.__webglColorRenderbuffer[n]);const r=o.convert(a.format,a.colorSpace);const s=o.convert(a.type);const l=S(a.internalFormat,r,s,a.colorSpace,t.isXRRenderTarget===true);const d=oe(t);e.renderbufferStorageMultisample(e.RENDERBUFFER,d,l,t.width,t.height);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+n,e.RENDERBUFFER,i.__webglColorRenderbuffer[n])}e.bindRenderbuffer(e.RENDERBUFFER,null);if(t.depthBuffer){i.__webglDepthRenderbuffer=e.createRenderbuffer();$(i.__webglDepthRenderbuffer,t,true)}n.bindFramebuffer(e.FRAMEBUFFER,null)}}if(d){n.bindTexture(e.TEXTURE_CUBE_MAP,l.__webglTexture);W(e.TEXTURE_CUBE_MAP,a);for(let n=0;n<6;n++)if(a.mipmaps&&a.mipmaps.length>0)for(let r=0;r<a.mipmaps.length;r++)Z(i.__webglFramebuffer[n][r],t,a,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,r);else Z(i.__webglFramebuffer[n],t,a,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+n,0);g(a)&&v(e.TEXTURE_CUBE_MAP);n.unbindTexture()}else if(u){for(let a=0,o=c.length;a<o;a++){const o=c[a];const s=r.get(o);n.bindTexture(e.TEXTURE_2D,s.__webglTexture);W(e.TEXTURE_2D,o);Z(i.__webglFramebuffer,t,o,e.COLOR_ATTACHMENT0+a,e.TEXTURE_2D,0);g(o)&&v(e.TEXTURE_2D)}n.unbindTexture()}else{let r=e.TEXTURE_2D;(t.isWebGL3DRenderTarget||t.isWebGLArrayRenderTarget)&&(r=t.isWebGL3DRenderTarget?e.TEXTURE_3D:e.TEXTURE_2D_ARRAY);n.bindTexture(r,l.__webglTexture);W(r,a);if(a.mipmaps&&a.mipmaps.length>0)for(let n=0;n<a.mipmaps.length;n++)Z(i.__webglFramebuffer[n],t,a,e.COLOR_ATTACHMENT0,r,n);else Z(i.__webglFramebuffer,t,a,e.COLOR_ATTACHMENT0,r,0);g(a)&&v(r);n.unbindTexture()}t.depthBuffer&&J(t)}function ne(e){const t=e.textures;for(let a=0,i=t.length;a<i;a++){const i=t[a];if(g(i)){const t=E(e);const a=r.get(i).__webglTexture;n.bindTexture(t,a);v(t);n.unbindTexture()}}}const ae=[];const re=[];function ie(t){if(t.samples>0)if(se(t)===false){const a=t.textures;const i=t.width;const o=t.height;let s=e.COLOR_BUFFER_BIT;const l=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;const d=r.get(t);const u=a.length>1;if(u)for(let t=0;t<a.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,null);n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer);e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,null,0)}n.bindFramebuffer(e.READ_FRAMEBUFFER,d.__webglMultisampledFramebuffer);const f=t.texture.mipmaps;f&&f.length>0?n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer[0]):n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglFramebuffer);for(let n=0;n<a.length;n++){if(t.resolveDepthBuffer){t.depthBuffer&&(s|=e.DEPTH_BUFFER_BIT);t.stencilBuffer&&t.resolveStencilBuffer&&(s|=e.STENCIL_BUFFER_BIT)}if(u){e.framebufferRenderbuffer(e.READ_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d.__webglColorRenderbuffer[n]);const t=r.get(a[n]).__webglTexture;e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)}e.blitFramebuffer(0,0,i,o,0,0,i,o,s,e.NEAREST);if(c===true){ae.length=0;re.length=0;ae.push(e.COLOR_ATTACHMENT0+n);if(t.depthBuffer&&t.resolveDepthBuffer===false){ae.push(l);re.push(l);e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,re)}e.invalidateFramebuffer(e.READ_FRAMEBUFFER,ae)}}n.bindFramebuffer(e.READ_FRAMEBUFFER,null);n.bindFramebuffer(e.DRAW_FRAMEBUFFER,null);if(u)for(let t=0;t<a.length;t++){n.bindFramebuffer(e.FRAMEBUFFER,d.__webglMultisampledFramebuffer);e.framebufferRenderbuffer(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.RENDERBUFFER,d.__webglColorRenderbuffer[t]);const i=r.get(a[t]).__webglTexture;n.bindFramebuffer(e.FRAMEBUFFER,d.__webglFramebuffer);e.framebufferTexture2D(e.DRAW_FRAMEBUFFER,e.COLOR_ATTACHMENT0+t,e.TEXTURE_2D,i,0)}n.bindFramebuffer(e.DRAW_FRAMEBUFFER,d.__webglMultisampledFramebuffer)}else if(t.depthBuffer&&t.resolveDepthBuffer===false&&c){const n=t.stencilBuffer?e.DEPTH_STENCIL_ATTACHMENT:e.DEPTH_ATTACHMENT;e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER,[n])}}function oe(e){return Math.min(i.maxSamples,e.samples)}function se(e){const n=r.get(e);return e.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===true&&n.__useRenderToTexture!==false}function le(e){const t=s.render.frame;if(u.get(e)!==t){u.set(e,t);e.update()}}function ce(e,t){const n=e.colorSpace;const a=e.format;const r=e.type;if(e.isCompressedTexture===true||e.isVideoTexture===true)return t;n!==Y&&n!==Yt&&(T.getTransfer(n)===b?a===N&&r===F||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",n));return t}function de(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement){d.width=e.naturalWidth||e.width;d.height=e.naturalHeight||e.height}else if(typeof VideoFrame!=="undefined"&&e instanceof VideoFrame){d.width=e.displayWidth;d.height=e.displayHeight}else{d.width=e.width;d.height=e.height}return d}this.allocateTextureUnit=D;this.resetTextureUnits=w;this.setTexture2D=I;this.setTexture2DArray=O;this.setTexture3D=H;this.setTextureCube=G;this.rebindTextures=ee;this.setupRenderTarget=te;this.updateRenderTargetMipmap=ne;this.updateMultisampleRenderTarget=ie;this.setupDepthRenderbuffer=J;this.setupFrameBufferTexture=Z;this.useMultisampledRTT=se}function Wl(e,t){function n(n,a=Yt){let r;const i=T.getTransfer(a);if(n===F)return e.UNSIGNED_BYTE;if(n===Zt)return e.UNSIGNED_SHORT_4_4_4_4;if(n===$t)return e.UNSIGNED_SHORT_5_5_5_1;if(n===Qt)return e.UNSIGNED_INT_5_9_9_9_REV;if(n===Jt)return e.BYTE;if(n===tn)return e.SHORT;if(n===wt)return e.UNSIGNED_SHORT;if(n===w)return e.INT;if(n===Pt)return e.UNSIGNED_INT;if(n===B)return e.FLOAT;if(n===O)return e.HALF_FLOAT;if(n===nn)return e.ALPHA;if(n===an)return e.RGB;if(n===N)return e.RGBA;if(n===qt)return e.DEPTH_COMPONENT;if(n===Kt)return e.DEPTH_STENCIL;if(n===rn)return e.RED;if(n===on)return e.RED_INTEGER;if(n===sn)return e.RG;if(n===ln)return e.RG_INTEGER;if(n===un)return e.RGBA_INTEGER;if(n===pn||n===mn||n===hn||n===_n)if(i===b){r=t.get("WEBGL_compressed_texture_s3tc_srgb");if(r===null)return null;if(n===pn)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===mn)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===hn)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===_n)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{r=t.get("WEBGL_compressed_texture_s3tc");if(r===null)return null;if(n===pn)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===mn)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===hn)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===_n)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(n===gn||n===vn||n===En||n===Sn){r=t.get("WEBGL_compressed_texture_pvrtc");if(r===null)return null;if(n===gn)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===vn)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===En)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Sn)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(n===Tn||n===Mn||n===xn){r=t.get("WEBGL_compressed_texture_etc");if(r===null)return null;if(n===Tn||n===Mn)return i===b?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===xn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(n===Rn||n===An||n===bn||n===Cn||n===Ln||n===Pn||n===Un||n===wn||n===Dn||n===yn||n===In||n===Nn||n===On||n===Fn){r=t.get("WEBGL_compressed_texture_astc");if(r===null)return null;if(n===Rn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===An)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===bn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===Cn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Ln)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Pn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Un)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===wn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Dn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===yn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===In)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Nn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===On)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Fn)return i===b?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(n===Bn||n===Hn||n===Gn){r=t.get("EXT_texture_compression_bptc");if(r===null)return null;if(n===Bn)return i===b?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Hn)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Gn)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(n===Vn||n===zn||n===kn||n===Wn){r=t.get("EXT_texture_compression_rgtc");if(r===null)return null;if(n===Bn)return r.COMPRESSED_RED_RGTC1_EXT;if(n===zn)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===kn)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Wn)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return n===Ut?e.UNSIGNED_INT_24_8:e[n]!==void 0?e[n]:null}return{convert:n}}const Xl="\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}";const Yl="\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}";class WebXRDepthSensing{constructor(){
/**
		 * A texture representing the depth of the user's environment.
		 *
		 * @type {?Texture}
		 */
this.texture=null;
/**
		 * A plane mesh for visualizing the depth texture.
		 *
		 * @type {?Mesh}
		 */this.mesh=null;
/**
		 * The depth near value.
		 *
		 * @type {number}
		 */this.depthNear=0;
/**
		 * The depth near far.
		 *
		 * @type {number}
		 */this.depthFar=0}
/**
	 * Inits the depth sensing module
	 *
	 * @param {WebGLRenderer} renderer - The renderer.
	 * @param {XRWebGLDepthInformation} depthData - The XR depth data.
	 * @param {XRRenderState} renderState - The XR render state.
	 */init(e,t,n){if(this.texture===null){const a=new pe;const r=e.properties.get(a);r.__webglTexture=t.texture;if(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar){this.depthNear=t.depthNear;this.depthFar=t.depthFar}this.texture=a}}
/**
	 * Returns a plane mesh that visualizes the depth texture.
	 *
	 * @param {ArrayCamera} cameraXR - The XR camera.
	 * @return {?Mesh} The plane mesh.
	 */getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport;const n=new g({vertexShader:Xl,fragmentShader:Yl,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new p(new C(20,20),n)}return this.mesh}reset(){this.texture=null;this.mesh=null}getDepthTexture(){return this.texture}}class WebXRManager extends Xn{
/**
	 * Constructs a new WebGL renderer.
	 *
	 * @param {WebGLRenderer} renderer - The renderer.
	 * @param {WebGL2RenderingContext} gl - The rendering context.
	 */
constructor(e,t){super();const n=this;let r=null;let i=1;let o=null;let s="local-floor";let c=1;let d=null;let u=null;let f=null;let p=null;let m=null;let h=null;const _=new WebXRDepthSensing;const g=t.getContextAttributes();let v=null;let E=null;const S=[];const T=[];const M=new a;let x=null;const R=new j;R.viewport=new le;const A=new j;A.viewport=new le;const b=[R,A];const C=new Yn;let L=null;let P=null;
/**
		 * Whether the manager's XR camera should be automatically updated or not.
		 *
		 * @type {boolean}
		 * @default true
		 */this.cameraAutoUpdate=true;
/**
		 * This flag notifies the renderer to be ready for XR rendering. Set it to `true`
		 * if you are going to use XR in your app.
		 *
		 * @type {boolean}
		 * @default false
		 */this.enabled=false;
/**
		 * Whether XR presentation is active or not.
		 *
		 * @type {boolean}
		 * @readonly
		 * @default false
		 */this.isPresenting=false;
/**
		 * Returns a group representing the `target ray` space of the XR controller.
		 * Use this space for visualizing 3D objects that support the user in pointing
		 * tasks like UI interaction.
		 *
		 * @param {number} index - The index of the controller.
		 * @return {Group} A group representing the `target ray` space.
		 */this.getController=function(e){let t=S[e];if(t===void 0){t=new Kn;S[e]=t}return t.getTargetRaySpace()};
/**
		 * Returns a group representing the `grip` space of the XR controller.
		 * Use this space for visualizing 3D objects that support the user in pointing
		 * tasks like UI interaction.
		 *
		 * Note: If you want to show something in the user's hand AND offer a
		 * pointing ray at the same time, you'll want to attached the handheld object
		 * to the group returned by `getControllerGrip()` and the ray to the
		 * group returned by `getController()`. The idea is to have two
		 * different groups in two different coordinate spaces for the same WebXR
		 * controller.
		 *
		 * @param {number} index - The index of the controller.
		 * @return {Group} A group representing the `grip` space.
		 */this.getControllerGrip=function(e){let t=S[e];if(t===void 0){t=new Kn;S[e]=t}return t.getGripSpace()};
/**
		 * Returns a group representing the `hand` space of the XR controller.
		 * Use this space for visualizing 3D objects that support the user in pointing
		 * tasks like UI interaction.
		 *
		 * @param {number} index - The index of the controller.
		 * @return {Group} A group representing the `hand` space.
		 */this.getHand=function(e){let t=S[e];if(t===void 0){t=new Kn;S[e]=t}return t.getHandSpace()};function U(e){const t=T.indexOf(e.inputSource);if(t===-1)return;const n=S[t];if(n!==void 0){n.update(e.inputSource,e.frame,d||o);n.dispatchEvent({type:e.type,data:e.inputSource})}}function w(){r.removeEventListener("select",U);r.removeEventListener("selectstart",U);r.removeEventListener("selectend",U);r.removeEventListener("squeeze",U);r.removeEventListener("squeezestart",U);r.removeEventListener("squeezeend",U);r.removeEventListener("end",w);r.removeEventListener("inputsourceschange",D);for(let e=0;e<S.length;e++){const t=T[e];if(t!==null){T[e]=null;S[e].disconnect(t)}}L=null;P=null;_.reset();e.setRenderTarget(v);m=null;p=null;f=null;r=null;E=null;z.stop();n.isPresenting=false;e.setPixelRatio(x);e.setSize(M.width,M.height,false);n.dispatchEvent({type:"sessionend"})}
/**
		 * Sets the framebuffer scale factor.
		 *
		 * This method can not be used during a XR session.
		 *
		 * @param {number} value - The framebuffer scale factor.
		 */this.setFramebufferScaleFactor=function(e){i=e;n.isPresenting===true&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")};
/**
		 * Sets the reference space type. Can be used to configure a spatial relationship with the user's physical
		 * environment. Depending on how the user moves in 3D space, setting an appropriate reference space can
		 * improve tracking. Default is `local-floor`. Valid values can be found here
		 * https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace#reference_space_types.
		 *
		 * This method can not be used during a XR session.
		 *
		 * @param {string} value - The reference space type.
		 */this.setReferenceSpaceType=function(e){s=e;n.isPresenting===true&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")};this.getReferenceSpace=function(){return d||o};
/**
		 * Sets a custom XR reference space.
		 *
		 * @param {XRReferenceSpace} space - The XR reference space.
		 */this.setReferenceSpace=function(e){d=e};this.getBaseLayer=function(){return p!==null?p:m};this.getBinding=function(){return f};this.getFrame=function(){return h};this.getSession=function(){return r};
/**
		 * After a XR session has been requested usually with one of the `*Button` modules, it
		 * is injected into the renderer with this method. This method triggers the start of
		 * the actual XR rendering.
		 *
		 * @async
		 * @param {XRSession} value - The XR session to set.
		 * @return {Promise} A Promise that resolves when the session has been set.
		 */this.setSession=async function(a){r=a;if(r!==null){v=e.getRenderTarget();r.addEventListener("select",U);r.addEventListener("selectstart",U);r.addEventListener("selectend",U);r.addEventListener("squeeze",U);r.addEventListener("squeezestart",U);r.addEventListener("squeezeend",U);r.addEventListener("end",w);r.addEventListener("inputsourceschange",D);g.xrCompatible!==true&&await t.makeXRCompatible();x=e.getPixelRatio();e.getSize(M);const a=typeof XRWebGLBinding!=="undefined"&&"createProjectionLayer"in XRWebGLBinding.prototype;if(a){let n=null;let a=null;let o=null;if(g.depth){o=g.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24;n=g.stencil?Kt:qt;a=g.stencil?Ut:Pt}const s={colorFormat:t.RGBA8,depthFormat:o,scaleFactor:i};f=new XRWebGLBinding(r,t);p=f.createProjectionLayer(s);r.updateRenderState({layers:[p]});e.setPixelRatio(1);e.setSize(p.textureWidth,p.textureHeight,false);E=new te(p.textureWidth,p.textureHeight,{format:N,type:F,depthTexture:new me(p.textureWidth,p.textureHeight,a,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:g.stencil,colorSpace:e.outputColorSpace,samples:g.antialias?4:0,resolveDepthBuffer:p.ignoreDepthValues===false,resolveStencilBuffer:p.ignoreDepthValues===false})}else{const n={antialias:g.antialias,alpha:true,depth:g.depth,stencil:g.stencil,framebufferScaleFactor:i};m=new XRWebGLLayer(r,t,n);r.updateRenderState({baseLayer:m});e.setPixelRatio(1);e.setSize(m.framebufferWidth,m.framebufferHeight,false);E=new te(m.framebufferWidth,m.framebufferHeight,{format:N,type:F,colorSpace:e.outputColorSpace,stencilBuffer:g.stencil,resolveDepthBuffer:m.ignoreDepthValues===false,resolveStencilBuffer:m.ignoreDepthValues===false})}E.isXRRenderTarget=true;this.setFoveation(c);d=null;o=await r.requestReferenceSpace(s);z.setContext(r);z.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(r!==null)return r.environmentBlendMode};this.getDepthTexture=function(){return _.getDepthTexture()};function D(e){for(let t=0;t<e.removed.length;t++){const n=e.removed[t];const a=T.indexOf(n);if(a>=0){T[a]=null;S[a].disconnect(n)}}for(let t=0;t<e.added.length;t++){const n=e.added[t];let a=T.indexOf(n);if(a===-1){for(let e=0;e<S.length;e++){if(e>=T.length){T.push(n);a=e;break}if(T[e]===null){T[e]=n;a=e;break}}if(a===-1)break}const r=S[a];r&&r.connect(n)}}const y=new l;const I=new l;
/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 *
		 * @param {ArrayCamera} camera - The camera to update.
		 * @param {PerspectiveCamera} cameraL - The left camera.
		 * @param {PerspectiveCamera} cameraR - The right camera.
		 */function O(e,t,n){y.setFromMatrixPosition(t.matrixWorld);I.setFromMatrixPosition(n.matrixWorld);const a=y.distanceTo(I);const r=t.projectionMatrix.elements;const i=n.projectionMatrix.elements;const o=r[14]/(r[10]-1);const s=r[14]/(r[10]+1);const l=(r[9]+1)/r[5];const c=(r[9]-1)/r[5];const d=(r[8]-1)/r[0];const u=(i[8]+1)/i[0];const f=o*d;const p=o*u;const m=a/(-d+u);const h=m*-d;t.matrixWorld.decompose(e.position,e.quaternion,e.scale);e.translateX(h);e.translateZ(m);e.matrixWorld.compose(e.position,e.quaternion,e.scale);e.matrixWorldInverse.copy(e.matrixWorld).invert();if(r[10]===-1){e.projectionMatrix.copy(t.projectionMatrix);e.projectionMatrixInverse.copy(t.projectionMatrixInverse)}else{const t=o+m;const n=s+m;const r=f-h;const i=p+(a-h);const d=l*s/n*t;const u=c*s/n*t;e.projectionMatrix.makePerspective(r,i,d,u,t,n);e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}function B(e,t){t===null?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix);e.matrixWorldInverse.copy(e.matrixWorld).invert()}
/**
		 * Updates the state of the XR camera. Use this method on app level if you
		 * set cameraAutoUpdate` to `false`. The method requires the non-XR
		 * camera of the scene as a parameter. The passed in camera's transformation
		 * is automatically adjusted to the position of the XR camera when calling
		 * this method.
		 *
		 * @param {Camera} camera - The camera.
		 */this.updateCamera=function(e){if(r===null)return;let t=e.near;let n=e.far;if(_.texture!==null){_.depthNear>0&&(t=_.depthNear);_.depthFar>0&&(n=_.depthFar)}C.near=A.near=R.near=t;C.far=A.far=R.far=n;if(L!==C.near||P!==C.far){r.updateRenderState({depthNear:C.near,depthFar:C.far});L=C.near;P=C.far}R.layers.mask=e.layers.mask|2;A.layers.mask=e.layers.mask|4;C.layers.mask=R.layers.mask|A.layers.mask;const a=e.parent;const i=C.cameras;B(C,a);for(let e=0;e<i.length;e++)B(i[e],a);i.length===2?O(C,R,A):C.projectionMatrix.copy(R.projectionMatrix);H(e,C,a)};function H(e,t,n){if(n===null)e.matrix.copy(t.matrixWorld);else{e.matrix.copy(n.matrixWorld);e.matrix.invert();e.matrix.multiply(t.matrixWorld)}e.matrix.decompose(e.position,e.quaternion,e.scale);e.updateMatrixWorld(true);e.projectionMatrix.copy(t.projectionMatrix);e.projectionMatrixInverse.copy(t.projectionMatrixInverse);if(e.isPerspectiveCamera){e.fov=jn*2*Math.atan(1/e.projectionMatrix.elements[5]);e.zoom=1}}this.getCamera=function(){return C};this.getFoveation=function(){if(p!==null||m!==null)return c};
/**
		 * Sets the foveation value.
		 *
		 * @param {number} value - A number in the range `[0,1]` where `0` means no foveation (full resolution)
		 * and `1` means maximum foveation (the edges render at lower resolution).
		 */this.setFoveation=function(e){c=e;p!==null&&(p.fixedFoveation=e);m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=e)};this.hasDepthSensing=function(){return _.texture!==null};this.getDepthSensingMesh=function(){return _.getMesh(C)};let G=null;function V(t,a){u=a.getViewerPose(d||o);h=a;if(u!==null){const t=u.views;if(m!==null){e.setRenderTargetFramebuffer(E,m.framebuffer);e.setRenderTarget(E)}let n=false;if(t.length!==C.cameras.length){C.cameras.length=0;n=true}for(let a=0;a<t.length;a++){const r=t[a];let i=null;if(m!==null)i=m.getViewport(r);else{const t=f.getViewSubImage(p,r);i=t.viewport;if(a===0){e.setRenderTargetTextures(E,t.colorTexture,t.depthStencilTexture);e.setRenderTarget(E)}}let o=b[a];if(o===void 0){o=new j;o.layers.enable(a);o.viewport=new le;b[a]=o}o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.quaternion,o.scale);o.projectionMatrix.fromArray(r.projectionMatrix);o.projectionMatrixInverse.copy(o.projectionMatrix).invert();o.viewport.set(i.x,i.y,i.width,i.height);if(a===0){C.matrix.copy(o.matrix);C.matrix.decompose(C.position,C.quaternion,C.scale)}n===true&&C.cameras.push(o)}const a=r.enabledFeatures;const i=a&&a.includes("depth-sensing")&&r.depthUsage=="gpu-optimized";if(i&&f){const n=f.getDepthInformation(t[0]);n&&n.isValid&&n.texture&&_.init(e,n,r.renderState)}}for(let e=0;e<S.length;e++){const t=T[e];const n=S[e];t!==null&&n!==void 0&&n.update(t,a,d||o)}G&&G(t,a);a.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:a});h=null}const z=new aa;z.setAnimationLoop(V);this.setAnimationLoop=function(e){G=e};this.dispose=function(){}}}const Kl=new c;const jl=new d;function ql(e,t){function n(e,t){e.matrixAutoUpdate===true&&e.updateMatrix();t.value.copy(e.matrix)}function a(t,n){n.color.getRGB(t.fogColor.value,U(e));if(n.isFog){t.fogNear.value=n.near;t.fogFar.value=n.far}else n.isFogExp2&&(t.fogDensity.value=n.density)}function r(e,t,n,a,r){if(t.isMeshBasicMaterial)i(e,t);else if(t.isMeshLambertMaterial)i(e,t);else if(t.isMeshToonMaterial){i(e,t);u(e,t)}else if(t.isMeshPhongMaterial){i(e,t);d(e,t)}else if(t.isMeshStandardMaterial){i(e,t);f(e,t);t.isMeshPhysicalMaterial&&p(e,t,r)}else if(t.isMeshMatcapMaterial){i(e,t);m(e,t)}else if(t.isMeshDepthMaterial)i(e,t);else if(t.isMeshDistanceMaterial){i(e,t);h(e,t)}else if(t.isMeshNormalMaterial)i(e,t);else if(t.isLineBasicMaterial){o(e,t);t.isLineDashedMaterial&&s(e,t)}else if(t.isPointsMaterial)l(e,t,n,a);else if(t.isSpriteMaterial)c(e,t);else if(t.isShadowMaterial){e.color.value.copy(t.color);e.opacity.value=t.opacity}else t.isShaderMaterial&&(t.uniformsNeedUpdate=false)}function i(e,a){e.opacity.value=a.opacity;a.color&&e.diffuse.value.copy(a.color);a.emissive&&e.emissive.value.copy(a.emissive).multiplyScalar(a.emissiveIntensity);if(a.map){e.map.value=a.map;n(a.map,e.mapTransform)}if(a.alphaMap){e.alphaMap.value=a.alphaMap;n(a.alphaMap,e.alphaMapTransform)}if(a.bumpMap){e.bumpMap.value=a.bumpMap;n(a.bumpMap,e.bumpMapTransform);e.bumpScale.value=a.bumpScale;a.side===E&&(e.bumpScale.value*=-1)}if(a.normalMap){e.normalMap.value=a.normalMap;n(a.normalMap,e.normalMapTransform);e.normalScale.value.copy(a.normalScale);a.side===E&&e.normalScale.value.negate()}if(a.displacementMap){e.displacementMap.value=a.displacementMap;n(a.displacementMap,e.displacementMapTransform);e.displacementScale.value=a.displacementScale;e.displacementBias.value=a.displacementBias}if(a.emissiveMap){e.emissiveMap.value=a.emissiveMap;n(a.emissiveMap,e.emissiveMapTransform)}if(a.specularMap){e.specularMap.value=a.specularMap;n(a.specularMap,e.specularMapTransform)}a.alphaTest>0&&(e.alphaTest.value=a.alphaTest);const r=t.get(a);const i=r.envMap;const o=r.envMapRotation;if(i){e.envMap.value=i;Kl.copy(o);Kl.x*=-1;Kl.y*=-1;Kl.z*=-1;if(i.isCubeTexture&&i.isRenderTargetTexture===false){Kl.y*=-1;Kl.z*=-1}e.envMapRotation.value.setFromMatrix4(jl.makeRotationFromEuler(Kl));e.flipEnvMap.value=i.isCubeTexture&&i.isRenderTargetTexture===false?-1:1;e.reflectivity.value=a.reflectivity;e.ior.value=a.ior;e.refractionRatio.value=a.refractionRatio}if(a.lightMap){e.lightMap.value=a.lightMap;e.lightMapIntensity.value=a.lightMapIntensity;n(a.lightMap,e.lightMapTransform)}if(a.aoMap){e.aoMap.value=a.aoMap;e.aoMapIntensity.value=a.aoMapIntensity;n(a.aoMap,e.aoMapTransform)}}function o(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;if(t.map){e.map.value=t.map;n(t.map,e.mapTransform)}}function s(e,t){e.dashSize.value=t.dashSize;e.totalSize.value=t.dashSize+t.gapSize;e.scale.value=t.scale}function l(e,t,a,r){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.size.value=t.size*a;e.scale.value=r*.5;if(t.map){e.map.value=t.map;n(t.map,e.uvTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;n(t.alphaMap,e.alphaMapTransform)}t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function c(e,t){e.diffuse.value.copy(t.color);e.opacity.value=t.opacity;e.rotation.value=t.rotation;if(t.map){e.map.value=t.map;n(t.map,e.mapTransform)}if(t.alphaMap){e.alphaMap.value=t.alphaMap;n(t.alphaMap,e.alphaMapTransform)}t.alphaTest>0&&(e.alphaTest.value=t.alphaTest)}function d(e,t){e.specular.value.copy(t.specular);e.shininess.value=Math.max(t.shininess,1e-4)}function u(e,t){t.gradientMap&&(e.gradientMap.value=t.gradientMap)}function f(e,t){e.metalness.value=t.metalness;if(t.metalnessMap){e.metalnessMap.value=t.metalnessMap;n(t.metalnessMap,e.metalnessMapTransform)}e.roughness.value=t.roughness;if(t.roughnessMap){e.roughnessMap.value=t.roughnessMap;n(t.roughnessMap,e.roughnessMapTransform)}t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}function p(e,t,a){e.ior.value=t.ior;if(t.sheen>0){e.sheenColor.value.copy(t.sheenColor).multiplyScalar(t.sheen);e.sheenRoughness.value=t.sheenRoughness;if(t.sheenColorMap){e.sheenColorMap.value=t.sheenColorMap;n(t.sheenColorMap,e.sheenColorMapTransform)}if(t.sheenRoughnessMap){e.sheenRoughnessMap.value=t.sheenRoughnessMap;n(t.sheenRoughnessMap,e.sheenRoughnessMapTransform)}}if(t.clearcoat>0){e.clearcoat.value=t.clearcoat;e.clearcoatRoughness.value=t.clearcoatRoughness;if(t.clearcoatMap){e.clearcoatMap.value=t.clearcoatMap;n(t.clearcoatMap,e.clearcoatMapTransform)}if(t.clearcoatRoughnessMap){e.clearcoatRoughnessMap.value=t.clearcoatRoughnessMap;n(t.clearcoatRoughnessMap,e.clearcoatRoughnessMapTransform)}if(t.clearcoatNormalMap){e.clearcoatNormalMap.value=t.clearcoatNormalMap;n(t.clearcoatNormalMap,e.clearcoatNormalMapTransform);e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale);t.side===E&&e.clearcoatNormalScale.value.negate()}}t.dispersion>0&&(e.dispersion.value=t.dispersion);if(t.iridescence>0){e.iridescence.value=t.iridescence;e.iridescenceIOR.value=t.iridescenceIOR;e.iridescenceThicknessMinimum.value=t.iridescenceThicknessRange[0];e.iridescenceThicknessMaximum.value=t.iridescenceThicknessRange[1];if(t.iridescenceMap){e.iridescenceMap.value=t.iridescenceMap;n(t.iridescenceMap,e.iridescenceMapTransform)}if(t.iridescenceThicknessMap){e.iridescenceThicknessMap.value=t.iridescenceThicknessMap;n(t.iridescenceThicknessMap,e.iridescenceThicknessMapTransform)}}if(t.transmission>0){e.transmission.value=t.transmission;e.transmissionSamplerMap.value=a.texture;e.transmissionSamplerSize.value.set(a.width,a.height);if(t.transmissionMap){e.transmissionMap.value=t.transmissionMap;n(t.transmissionMap,e.transmissionMapTransform)}e.thickness.value=t.thickness;if(t.thicknessMap){e.thicknessMap.value=t.thicknessMap;n(t.thicknessMap,e.thicknessMapTransform)}e.attenuationDistance.value=t.attenuationDistance;e.attenuationColor.value.copy(t.attenuationColor)}if(t.anisotropy>0){e.anisotropyVector.value.set(t.anisotropy*Math.cos(t.anisotropyRotation),t.anisotropy*Math.sin(t.anisotropyRotation));if(t.anisotropyMap){e.anisotropyMap.value=t.anisotropyMap;n(t.anisotropyMap,e.anisotropyMapTransform)}}e.specularIntensity.value=t.specularIntensity;e.specularColor.value.copy(t.specularColor);if(t.specularColorMap){e.specularColorMap.value=t.specularColorMap;n(t.specularColorMap,e.specularColorMapTransform)}if(t.specularIntensityMap){e.specularIntensityMap.value=t.specularIntensityMap;n(t.specularIntensityMap,e.specularIntensityMapTransform)}}function m(e,t){t.matcap&&(e.matcap.value=t.matcap)}function h(e,n){const a=t.get(n).light;e.referencePosition.value.setFromMatrixPosition(a.matrixWorld);e.nearDistance.value=a.shadow.camera.near;e.farDistance.value=a.shadow.camera.far}return{refreshFogUniforms:a,refreshMaterialUniforms:r}}function Zl(e,t,n,a){let r={};let i={};let o=[];const s=e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS);function l(e,t){const n=t.program;a.uniformBlockBinding(e,n)}function c(e,n){let o=r[e.id];if(o===void 0){m(e);o=d(e);r[e.id]=o;e.addEventListener("dispose",_)}const s=n.program;a.updateUBOMapping(e,s);const l=t.render.frame;if(i[e.id]!==l){f(e);i[e.id]=l}}function d(t){const n=u();t.__bindingPointIndex=n;const a=e.createBuffer();const r=t.__size;const i=t.usage;e.bindBuffer(e.UNIFORM_BUFFER,a);e.bufferData(e.UNIFORM_BUFFER,r,i);e.bindBuffer(e.UNIFORM_BUFFER,null);e.bindBufferBase(e.UNIFORM_BUFFER,n,a);return a}function u(){for(let e=0;e<s;e++)if(o.indexOf(e)===-1){o.push(e);return e}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function f(t){const n=r[t.id];const a=t.uniforms;const i=t.__cache;e.bindBuffer(e.UNIFORM_BUFFER,n);for(let t=0,n=a.length;t<n;t++){const n=Array.isArray(a[t])?a[t]:[a[t]];for(let a=0,r=n.length;a<r;a++){const r=n[a];if(p(r,t,a,i)===true){const t=r.__offset;const n=Array.isArray(r.value)?r.value:[r.value];let a=0;for(let i=0;i<n.length;i++){const o=n[i];const s=h(o);if(typeof o==="number"||typeof o==="boolean"){r.__data[0]=o;e.bufferSubData(e.UNIFORM_BUFFER,t+a,r.__data)}else if(o.isMatrix3){r.__data[0]=o.elements[0];r.__data[1]=o.elements[1];r.__data[2]=o.elements[2];r.__data[3]=0;r.__data[4]=o.elements[3];r.__data[5]=o.elements[4];r.__data[6]=o.elements[5];r.__data[7]=0;r.__data[8]=o.elements[6];r.__data[9]=o.elements[7];r.__data[10]=o.elements[8];r.__data[11]=0}else{o.toArray(r.__data,a);a+=s.storage/Float32Array.BYTES_PER_ELEMENT}}e.bufferSubData(e.UNIFORM_BUFFER,t,r.__data)}}}e.bindBuffer(e.UNIFORM_BUFFER,null)}function p(e,t,n,a){const r=e.value;const i=t+"_"+n;if(a[i]===void 0){a[i]=typeof r==="number"||typeof r==="boolean"?r:r.clone();return true}{const e=a[i];if(typeof r==="number"||typeof r==="boolean"){if(e!==r){a[i]=r;return true}}else if(e.equals(r)===false){e.copy(r);return true}}return false}function m(e){const t=e.uniforms;let n=0;const a=16;for(let e=0,r=t.length;e<r;e++){const r=Array.isArray(t[e])?t[e]:[t[e]];for(let e=0,t=r.length;e<t;e++){const t=r[e];const i=Array.isArray(t.value)?t.value:[t.value];for(let e=0,r=i.length;e<r;e++){const r=i[e];const o=h(r);const s=n%a;const l=s%o.boundary;const c=s+l;n+=l;c!==0&&a-c<o.storage&&(n+=a-c);t.__data=new Float32Array(o.storage/Float32Array.BYTES_PER_ELEMENT);t.__offset=n;n+=o.storage}}}const r=n%a;r>0&&(n+=a-r);e.__size=n;e.__cache={};return this}function h(e){const t={boundary:0,storage:0};if(typeof e==="number"||typeof e==="boolean"){t.boundary=4;t.storage=4}else if(e.isVector2){t.boundary=8;t.storage=8}else if(e.isVector3||e.isColor){t.boundary=16;t.storage=12}else if(e.isVector4){t.boundary=16;t.storage=16}else if(e.isMatrix3){t.boundary=48;t.storage=48}else if(e.isMatrix4){t.boundary=64;t.storage=64}else e.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",e);return t}function _(t){const n=t.target;n.removeEventListener("dispose",_);const a=o.indexOf(n.__bindingPointIndex);o.splice(a,1);e.deleteBuffer(r[n.id]);delete r[n.id];delete i[n.id]}function g(){for(const t in r)e.deleteBuffer(r[t]);o=[];r={};i={}}return{bind:l,update:c,dispose:g}}class WebGLRenderer{
/**
	 * Constructs a new WebGL renderer.
	 *
	 * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
	 */
constructor(e={}){const{canvas:t=qn(),context:n=null,depth:a=true,stencil:r=false,alpha:i=false,antialias:s=false,premultipliedAlpha:c=true,preserveDrawingBuffer:u=false,powerPreference:f="default",failIfMajorPerformanceCaveat:p=false,reverseDepthBuffer:m=false}=e;
/**
		 * This flag can be used for type testing.
		 *
		 * @type {boolean}
		 * @readonly
		 * @default true
		 */this.isWebGLRenderer=true;let h;if(n!==null){if(typeof WebGLRenderingContext!=="undefined"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");h=n.getContextAttributes().alpha}else h=i;const _=new Uint32Array(4);const g=new Int32Array(4);let v=null;let S=null;const M=[];const x=[];
/**
		 * A canvas where the renderer draws its output.This is automatically created by the renderer
		 * in the constructor (if not provided already); you just need to add it to your page like so:
		 * ```js
		 * document.body.appendChild( renderer.domElement );
		 * ```
		 *
		 * @type {DOMElement}
		 */this.domElement=t;
/**
		 * A object with debug configuration settings.
		 *
		 * - `checkShaderErrors`: If it is `true`, defines whether material shader programs are
		 * checked for errors during compilation and linkage process. It may be useful to disable
		 * this check in production for performance gain. It is strongly recommended to keep these
		 * checks enabled during development. If the shader does not compile and link - it will not
		 * work and associated material will not render.
		 * - `onShaderError(gl, program, glVertexShader,glFragmentShader)`: A callback function that
		 * can be used for custom error reporting. The callback receives the WebGL context, an instance
		 * of WebGLProgram as well two instances of WebGLShader representing the vertex and fragment shader.
		 * Assigning a custom function disables the default error reporting.
		 *
		 * @type {Object}
		 */this.debug={
/**
			 * Enables error checking and reporting when shader programs are being compiled.
			 * @type {boolean}
			 */
checkShaderErrors:true,
/**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */
onShaderError:null};
/**
		 * Whether the renderer should automatically clear its output before rendering a frame or not.
		 *
		 * @type {boolean}
		 * @default true
		 */this.autoClear=true;
/**
		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
		 * the color buffer or not.
		 *
		 * @type {boolean}
		 * @default true
		 */this.autoClearColor=true;
/**
		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
		 * the depth buffer or not.
		 *
		 * @type {boolean}
		 * @default true
		 */this.autoClearDepth=true;
/**
		 * If {@link WebGLRenderer#autoClear} set to `true`, whether the renderer should clear
		 * the stencil buffer or not.
		 *
		 * @type {boolean}
		 * @default true
		 */this.autoClearStencil=true;
/**
		 * Whether the renderer should sort objects or not.
		 *
		 * Note: Sorting is used to attempt to properly render objects that have some
		 * degree of transparency. By definition, sorting objects may not work in all
		 * cases. Depending on the needs of application, it may be necessary to turn
		 * off sorting and use other methods to deal with transparency rendering e.g.
		 * manually determining each object's rendering order.
		 *
		 * @type {boolean}
		 * @default true
		 */this.sortObjects=true;
/**
		 * User-defined clipping planes specified in world space. These planes apply globally.
		 * Points in space whose dot product with the plane is negative are cut away.
		 *
		 * @type {Array<Plane>}
		 */this.clippingPlanes=[];
/**
		 * Whether the renderer respects object-level clipping planes or not.
		 *
		 * @type {boolean}
		 * @default false
		 */this.localClippingEnabled=false;
/**
		 * The tone mapping technique of the renderer.
		 *
		 * @type {(NoToneMapping|LinearToneMapping|ReinhardToneMapping|CineonToneMapping|ACESFilmicToneMapping|CustomToneMapping|AgXToneMapping|NeutralToneMapping)}
		 * @default NoToneMapping
		 */this.toneMapping=Z;
/**
		 * Exposure level of tone mapping.
		 *
		 * @type {number}
		 * @default 1
		 */this.toneMappingExposure=1;
/**
		 * The normalized resolution scale for the transmission render target, measured in percentage
		 * of viewport dimensions. Lowering this value can result in significant performance improvements
		 * when using {@link MeshPhysicalMaterial#transmission}.
		 *
		 * @type {number}
		 * @default 1
		 */this.transmissionResolutionScale=1;const R=this;let A=false;this._outputColorSpace=Zn;let b=0;let C=0;let P=null;let U=-1;let w=null;const D=new le;const y=new le;let I=null;const N=new o(0);let B=0;let H=t.width;let G=t.height;let V=1;let z=null;let k=null;const W=new le(0,0,H,G);const X=new le(0,0,H,G);let K=false;const j=new He;let q=false;let $=false;const Q=new d;const J=new d;const ee=new l;const ne=new le;const ae={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};let ie=false;function oe(){return P===null?V:1}let se=n;function ce(e,n){return t.getContext(e,n)}try{const e={alpha:true,depth:a,stencil:r,antialias:s,premultipliedAlpha:c,preserveDrawingBuffer:u,powerPreference:f,failIfMajorPerformanceCaveat:p};"setAttribute"in t&&t.setAttribute("data-engine",`three.js r${$n}`);t.addEventListener("webglcontextlost",Fe,false);t.addEventListener("webglcontextrestored",Be,false);t.addEventListener("webglcontextcreationerror",Ge,false);if(se===null){const t="webgl2";se=ce(t,e);if(se===null)throw ce(t)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(e){console.error("THREE.WebGLRenderer: "+e.message);throw e}let de,ue,fe,pe;let me,he,_e,ge,ve,Ee,Se;let Te,Me,xe,Re,Ae,be;let Ce,Le,Pe,Ue;let we,De,ye;function Ne(){de=new Do(se);de.init();we=new Wl(se,de);ue=new io(se,de,e,we);fe=new zl(se,de);ue.reverseDepthBuffer&&m&&fe.buffers.depth.setReversed(true);pe=new No(se);me=new bl;he=new kl(se,de,fe,me,ue,we,pe);_e=new so(R);ge=new wo(R);ve=new ra(se);De=new ao(se,ve);Ee=new yo(se,ve,pe,De);Se=new Fo(se,Ee,ve,pe);Le=new Oo(se,ue,he);Ae=new oo(me);Te=new Al(R,_e,ge,de,ue,De,Ae);Me=new ql(R,me);xe=new Ul;Re=new Fl(de);Ce=new no(R,_e,ge,fe,Se,h,c);be=new Gl(R,Se,ue);ye=new Zl(se,pe,ue,fe);Pe=new ro(se,de,pe);Ue=new Io(se,de,pe);pe.programs=Te.programs;
/**
			 * Holds details about the capabilities of the current rendering context.
			 *
			 * @name WebGLRenderer#capabilities
			 * @type {WebGLRenderer~Capabilities}
			 */R.capabilities=ue;
/**
			 * Provides methods for retrieving and testing WebGL extensions.
			 *
			 * - `get(extensionName:string)`: Used to check whether a WebGL extension is supported
			 * and return the extension object if available.
			 * - `has(extensionName:string)`: returns `true` if the extension is supported.
			 *
			 * @name WebGLRenderer#extensions
			 * @type {Object}
			 */R.extensions=de;
/**
			 * Used to track properties of other objects like native WebGL objects.
			 *
			 * @name WebGLRenderer#properties
			 * @type {Object}
			 */R.properties=me;
/**
			 * Manages the render lists of the renderer.
			 *
			 * @name WebGLRenderer#renderLists
			 * @type {Object}
			 */R.renderLists=xe;
/**
			 * Interface for managing shadows.
			 *
			 * @name WebGLRenderer#shadowMap
			 * @type {WebGLRenderer~ShadowMap}
			 */R.shadowMap=be;
/**
			 * Interface for managing the WebGL state.
			 *
			 * @name WebGLRenderer#state
			 * @type {Object}
			 */R.state=fe;
/**
			 * Holds a series of statistical information about the GPU memory
			 * and the rendering process. Useful for debugging and monitoring.
			 *
			 * By default these data are reset at each render call but when having
			 * multiple render passes per frame (e.g. when using post processing) it can
			 * be preferred to reset with a custom pattern. First, set `autoReset` to
			 * `false`.
			 * ```js
			 * renderer.info.autoReset = false;
			 * ```
			 * Call `reset()` whenever you have finished to render a single frame.
			 * ```js
			 * renderer.info.reset();
			 * ```
			 *
			 * @name WebGLRenderer#info
			 * @type {WebGLRenderer~Info}
			 */R.info=pe}Ne();const Oe=new WebXRManager(R,se);
/**
		 * A reference to the XR manager.
		 *
		 * @type {WebXRManager}
		 */this.xr=Oe;this.getContext=function(){return se};this.getContextAttributes=function(){return se.getContextAttributes()};this.forceContextLoss=function(){const e=de.get("WEBGL_lose_context");e&&e.loseContext()};this.forceContextRestore=function(){const e=de.get("WEBGL_lose_context");e&&e.restoreContext()};this.getPixelRatio=function(){return V};
/**
		 * Sets the given pixel ratio and resizes the canvas if necessary.
		 *
		 * @param {number} value - The pixel ratio.
		 */this.setPixelRatio=function(e){if(e!==void 0){V=e;this.setSize(H,G,false)}};
/**
		 * Returns the renderer's size in logical pixels. This method does not honor the pixel ratio.
		 *
		 * @param {Vector2} target - The method writes the result in this target object.
		 * @return {Vector2} The renderer's size in logical pixels.
		 */this.getSize=function(e){return e.set(H,G)};
/**
		 * Resizes the output canvas to (width, height) with device pixel ratio taken
		 * into account, and also sets the viewport to fit that size, starting in (0,
		 * 0). Setting `updateStyle` to false prevents any style changes to the output canvas.
		 *
		 * @param {number} width - The width in logical pixels.
		 * @param {number} height - The height in logical pixels.
		 * @param {boolean} [updateStyle=true] - Whether to update the `style` attribute of the canvas or not.
		 */this.setSize=function(e,n,a=true){if(Oe.isPresenting)console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");else{H=e;G=n;t.width=Math.floor(e*V);t.height=Math.floor(n*V);if(a===true){t.style.width=e+"px";t.style.height=n+"px"}this.setViewport(0,0,e,n)}};
/**
		 * Returns the drawing buffer size in physical pixels. This method honors the pixel ratio.
		 *
		 * @param {Vector2} target - The method writes the result in this target object.
		 * @return {Vector2} The drawing buffer size.
		 */this.getDrawingBufferSize=function(e){return e.set(H*V,G*V).floor()};
/**
		 * This method allows to define the drawing buffer size by specifying
		 * width, height and pixel ratio all at once. The size of the drawing
		 * buffer is computed with this formula:
		 * ```js
		 * size.x = width * pixelRatio;
		 * size.y = height * pixelRatio;
		 * ```
		 *
		 * @param {number} width - The width in logical pixels.
		 * @param {number} height - The height in logical pixels.
		 * @param {number} pixelRatio - The pixel ratio.
		 */this.setDrawingBufferSize=function(e,n,a){H=e;G=n;V=a;t.width=Math.floor(e*a);t.height=Math.floor(n*a);this.setViewport(0,0,e,n)};
/**
		 * Returns the current viewport definition.
		 *
		 * @param {Vector2} target - The method writes the result in this target object.
		 * @return {Vector2} The current viewport definition.
		 */this.getCurrentViewport=function(e){return e.copy(D)};
/**
		 * Returns the viewport definition.
		 *
		 * @param {Vector4} target - The method writes the result in this target object.
		 * @return {Vector4} The viewport definition.
		 */this.getViewport=function(e){return e.copy(W)};
/**
		 * Sets the viewport to render from `(x, y)` to `(x + width, y + height)`.
		 *
		 * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the viewport origin in logical pixel unit.
		 * Or alternatively a four-component vector specifying all the parameters of the viewport.
		 * @param {number} y - The vertical coordinate for the lower left corner of the viewport origin  in logical pixel unit.
		 * @param {number} width - The width of the viewport in logical pixel unit.
		 * @param {number} height - The height of the viewport in logical pixel unit.
		 */this.setViewport=function(e,t,n,a){e.isVector4?W.set(e.x,e.y,e.z,e.w):W.set(e,t,n,a);fe.viewport(D.copy(W).multiplyScalar(V).round())};
/**
		 * Returns the scissor region.
		 *
		 * @param {Vector4} target - The method writes the result in this target object.
		 * @return {Vector4} The scissor region.
		 */this.getScissor=function(e){return e.copy(X)};
/**
		 * Sets the scissor region to render from `(x, y)` to `(x + width, y + height)`.
		 *
		 * @param {number | Vector4} x - The horizontal coordinate for the lower left corner of the scissor region origin in logical pixel unit.
		 * Or alternatively a four-component vector specifying all the parameters of the scissor region.
		 * @param {number} y - The vertical coordinate for the lower left corner of the scissor region origin  in logical pixel unit.
		 * @param {number} width - The width of the scissor region in logical pixel unit.
		 * @param {number} height - The height of the scissor region in logical pixel unit.
		 */this.setScissor=function(e,t,n,a){e.isVector4?X.set(e.x,e.y,e.z,e.w):X.set(e,t,n,a);fe.scissor(y.copy(X).multiplyScalar(V).round())};this.getScissorTest=function(){return K};
/**
		 * Enable or disable the scissor test. When this is enabled, only the pixels
		 * within the defined scissor area will be affected by further renderer
		 * actions.
		 *
		 * @param {boolean} boolean - Whether the scissor test is enabled or not.
		 */this.setScissorTest=function(e){fe.setScissorTest(K=e)};
/**
		 * Sets a custom opaque sort function for the render lists. Pass `null`
		 * to use the default `painterSortStable` function.
		 *
		 * @param {?Function} method - The opaque sort function.
		 */this.setOpaqueSort=function(e){z=e};
/**
		 * Sets a custom transparent sort function for the render lists. Pass `null`
		 * to use the default `reversePainterSortStable` function.
		 *
		 * @param {?Function} method - The opaque sort function.
		 */this.setTransparentSort=function(e){k=e};
/**
		 * Returns the clear color.
		 *
		 * @param {Color} target - The method writes the result in this target object.
		 * @return {Color} The clear color.
		 */this.getClearColor=function(e){return e.copy(Ce.getClearColor())};
/**
		 * Sets the clear color and alpha.
		 *
		 * @param {Color} color - The clear color.
		 * @param {number} [alpha=1] - The clear alpha.
		 */this.setClearColor=function(){Ce.setClearColor(...arguments)};this.getClearAlpha=function(){return Ce.getClearAlpha()};
/**
		 * Sets the clear alpha.
		 *
		 * @param {number} alpha - The clear alpha.
		 */this.setClearAlpha=function(){Ce.setClearAlpha(...arguments)};
/**
		 * Tells the renderer to clear its color, depth or stencil drawing buffer(s).
		 * This method initializes the buffers to the current clear color values.
		 *
		 * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
		 * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
		 * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
		 */this.clear=function(e=true,t=true,n=true){let a=0;if(e){let e=false;if(P!==null){const t=P.texture.format;e=t===un||t===ln||t===on}if(e){const e=P.texture.type;const t=e===F||e===Pt||e===wt||e===Ut||e===Zt||e===$t;const n=Ce.getClearColor();const a=Ce.getClearAlpha();const r=n.r;const i=n.g;const o=n.b;if(t){_[0]=r;_[1]=i;_[2]=o;_[3]=a;se.clearBufferuiv(se.COLOR,0,_)}else{g[0]=r;g[1]=i;g[2]=o;g[3]=a;se.clearBufferiv(se.COLOR,0,g)}}else a|=se.COLOR_BUFFER_BIT}t&&(a|=se.DEPTH_BUFFER_BIT);if(n){a|=se.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}se.clear(a)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",Fe,false);t.removeEventListener("webglcontextrestored",Be,false);t.removeEventListener("webglcontextcreationerror",Ge,false);Ce.dispose();xe.dispose();Re.dispose();me.dispose();_e.dispose();ge.dispose();Se.dispose();De.dispose();ye.dispose();Te.dispose();Oe.dispose();Oe.removeEventListener("sessionstart",Ke);Oe.removeEventListener("sessionend",je);qe.stop()};function Fe(e){e.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");A=true}function Be(){console.log("THREE.WebGLRenderer: Context Restored.");A=false;const e=pe.autoReset;const t=be.enabled;const n=be.autoUpdate;const a=be.needsUpdate;const r=be.type;Ne();pe.autoReset=e;be.enabled=t;be.autoUpdate=n;be.needsUpdate=a;be.type=r}function Ge(e){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",e.statusMessage)}function Ve(e){const t=e.target;t.removeEventListener("dispose",Ve);ze(t)}function ze(e){ke(e);me.remove(e)}function ke(e){const t=me.get(e).programs;if(t!==void 0){t.forEach((function(e){Te.releaseProgram(e)}));e.isShaderMaterial&&Te.releaseShaderCache(e)}}this.renderBufferDirect=function(e,t,n,a,r,i){t===null&&(t=ae);const o=r.isMesh&&r.matrixWorld.determinant()<0;const s=rt(e,t,n,a,r);fe.setMaterial(a,o);let l=n.index;let c=1;if(a.wireframe===true){l=Ee.getWireframeAttribute(n);if(l===void 0)return;c=2}const d=n.drawRange;const u=n.attributes.position;let f=d.start*c;let p=(d.start+d.count)*c;if(i!==null){f=Math.max(f,i.start*c);p=Math.min(p,(i.start+i.count)*c)}if(l!==null){f=Math.max(f,0);p=Math.min(p,l.count)}else if(u!==void 0&&u!==null){f=Math.max(f,0);p=Math.min(p,u.count)}const m=p-f;if(m<0||m===Infinity)return;De.setup(r,a,s,n,l);let h;let _=Pe;if(l!==null){h=ve.get(l);_=Ue;_.setIndex(h)}if(r.isMesh)if(a.wireframe===true){fe.setLineWidth(a.wireframeLinewidth*oe());_.setMode(se.LINES)}else _.setMode(se.TRIANGLES);else if(r.isLine){let e=a.linewidth;e===void 0&&(e=1);fe.setLineWidth(e*oe());r.isLineSegments?_.setMode(se.LINES):r.isLineLoop?_.setMode(se.LINE_LOOP):_.setMode(se.LINE_STRIP)}else r.isPoints?_.setMode(se.POINTS):r.isSprite&&_.setMode(se.TRIANGLES);if(r.isBatchedMesh)if(r._multiDrawInstances!==null){re("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");_.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances)}else if(de.get("WEBGL_multi_draw"))_.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount);else{const e=r._multiDrawStarts;const t=r._multiDrawCounts;const n=r._multiDrawCount;const i=l?ve.get(l).bytesPerElement:1;const o=me.get(a).currentProgram.getUniforms();for(let a=0;a<n;a++){o.setValue(se,"_gl_DrawID",a);_.render(e[a]/i,t[a])}}else if(r.isInstancedMesh)_.renderInstances(f,m,r.count);else if(n.isInstancedBufferGeometry){const e=n._maxInstanceCount!==void 0?n._maxInstanceCount:Infinity;const t=Math.min(n.instanceCount,e);_.renderInstances(f,m,t)}else _.render(f,m)};function We(e,t,n){if(e.transparent===true&&e.side===Ie&&e.forceSinglePass===false){e.side=E;e.needsUpdate=true;tt(e,t,n);e.side=L;e.needsUpdate=true;tt(e,t,n);e.side=Ie}else tt(e,t,n)}
/**
		 * Compiles all materials in the scene with the camera. This is useful to precompile shaders
		 * before the first rendering. If you want to add a 3D object to an existing scene, use the third
		 * optional parameter for applying the target scene.
		 *
		 * Note that the (target) scene's lighting and environment must be configured before calling this method.
		 *
		 * @param {Object3D} scene - The scene or another type of 3D object to precompile.
		 * @param {Camera} camera - The camera.
		 * @param {?Scene} [targetScene=null] - The target scene.
		 * @return {Set<Material>} The precompiled materials.
		 */this.compile=function(e,t,n=null){n===null&&(n=e);S=Re.get(n);S.init(t);x.push(S);n.traverseVisible((function(e){if(e.isLight&&e.layers.test(t.layers)){S.pushLight(e);e.castShadow&&S.pushShadow(e)}}));e!==n&&e.traverseVisible((function(e){if(e.isLight&&e.layers.test(t.layers)){S.pushLight(e);e.castShadow&&S.pushShadow(e)}}));S.setupLights();const a=new Set;e.traverse((function(e){if(!(e.isMesh||e.isPoints||e.isLine||e.isSprite))return;const t=e.material;if(t)if(Array.isArray(t))for(let r=0;r<t.length;r++){const i=t[r];We(i,n,e);a.add(i)}else{We(t,n,e);a.add(t)}}));S=x.pop();return a};
/**
		 * Asynchronous version of {@link WebGLRenderer#compile}.
		 *
		 * This method makes use of the `KHR_parallel_shader_compile` WebGL extension. Hence,
		 * it is recommended to use this version of `compile()` whenever possible.
		 *
		 * @async
		 * @param {Object3D} scene - The scene or another type of 3D object to precompile.
		 * @param {Camera} camera - The camera.
		 * @param {?Scene} [targetScene=null] - The target scene.
		 * @return {Promise} A Promise that resolves when the given scene can be rendered without unnecessary stalling due to shader compilation.
		 */this.compileAsync=function(e,t,n=null){const a=this.compile(e,t,n);return new Promise((t=>{function n(){a.forEach((function(e){const t=me.get(e);const n=t.currentProgram;n.isReady()&&a.delete(e)}));a.size!==0?setTimeout(n,10):t(e)}de.get("KHR_parallel_shader_compile")!==null?n():setTimeout(n,10)}))};let Xe=null;function Ye(e){Xe&&Xe(e)}function Ke(){qe.stop()}function je(){qe.start()}const qe=new aa;qe.setAnimationLoop(Ye);typeof self!=="undefined"&&qe.setContext(self);this.setAnimationLoop=function(e){Xe=e;Oe.setAnimationLoop(e);e===null?qe.stop():qe.start()};Oe.addEventListener("sessionstart",Ke);Oe.addEventListener("sessionend",je);
/**
		 * Renders the given scene (or other type of 3D object) using the given camera.
		 *
		 * The render is done to a previously specified render target set by calling {@link WebGLRenderer#setRenderTarget}
		 * or to the canvas as usual.
		 *
		 * By default render buffers are cleared before rendering but you can prevent
		 * this by setting the property `autoClear` to `false`. If you want to prevent
		 * only certain buffers being cleared you can `autoClearColor`, `autoClearDepth`
		 * or `autoClearStencil` to `false`. To force a clear, use {@link WebGLRenderer#clear}.
		 *
		 * @param {Object3D} scene - The scene to render.
		 * @param {Camera} camera - The camera.
		 */this.render=function(e,t){if(t!==void 0&&t.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(A===true)return;e.matrixWorldAutoUpdate===true&&e.updateMatrixWorld();t.parent===null&&t.matrixWorldAutoUpdate===true&&t.updateMatrixWorld();if(Oe.enabled===true&&Oe.isPresenting===true){Oe.cameraAutoUpdate===true&&Oe.updateCamera(t);t=Oe.getCamera()}e.isScene===true&&e.onBeforeRender(R,e,t,P);S=Re.get(e,x.length);S.init(t);x.push(S);J.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);j.setFromProjectionMatrix(J);$=this.localClippingEnabled;q=Ae.init(this.clippingPlanes,$);v=xe.get(e,M.length);v.init();M.push(v);if(Oe.enabled===true&&Oe.isPresenting===true){const e=R.xr.getDepthSensingMesh();e!==null&&Ze(e,t,-Infinity,R.sortObjects)}Ze(e,t,0,R.sortObjects);v.finish();R.sortObjects===true&&v.sort(z,k);ie=Oe.enabled===false||Oe.isPresenting===false||Oe.hasDepthSensing()===false;ie&&Ce.addToRenderList(v,e);this.info.render.frame++;q===true&&Ae.beginShadows();const n=S.state.shadowsArray;be.render(n,e,t);q===true&&Ae.endShadows();this.info.autoReset===true&&this.info.reset();const a=v.opaque;const r=v.transmissive;S.setupLights();if(t.isArrayCamera){const n=t.cameras;if(r.length>0)for(let t=0,i=n.length;t<i;t++){const i=n[t];Qe(a,r,e,i)}ie&&Ce.render(e);for(let t=0,a=n.length;t<a;t++){const a=n[t];$e(v,e,a,a.viewport)}}else{r.length>0&&Qe(a,r,e,t);ie&&Ce.render(e);$e(v,e,t)}if(P!==null&&C===0){he.updateMultisampleRenderTarget(P);he.updateRenderTargetMipmap(P)}e.isScene===true&&e.onAfterRender(R,e,t);De.resetDefaultState();U=-1;w=null;x.pop();if(x.length>0){S=x[x.length-1];q===true&&Ae.setGlobalState(R.clippingPlanes,S.state.camera)}else S=null;M.pop();v=M.length>0?M[M.length-1]:null};function Ze(e,t,n,a){if(e.visible===false)return;const r=e.layers.test(t.layers);if(r)if(e.isGroup)n=e.renderOrder;else if(e.isLOD)e.autoUpdate===true&&e.update(t);else if(e.isLight){S.pushLight(e);e.castShadow&&S.pushShadow(e)}else if(e.isSprite){if(!e.frustumCulled||j.intersectsSprite(e)){a&&ne.setFromMatrixPosition(e.matrixWorld).applyMatrix4(J);const t=Se.update(e);const r=e.material;r.visible&&v.push(e,t,r,n,ne.z,null)}}else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||j.intersectsObject(e))){const t=Se.update(e);const r=e.material;if(a){if(e.boundingSphere!==void 0){e.boundingSphere===null&&e.computeBoundingSphere();ne.copy(e.boundingSphere.center)}else{t.boundingSphere===null&&t.computeBoundingSphere();ne.copy(t.boundingSphere.center)}ne.applyMatrix4(e.matrixWorld).applyMatrix4(J)}if(Array.isArray(r)){const a=t.groups;for(let i=0,o=a.length;i<o;i++){const o=a[i];const s=r[o.materialIndex];s&&s.visible&&v.push(e,t,s,n,ne.z,o)}}else r.visible&&v.push(e,t,r,n,ne.z,null)}const i=e.children;for(let e=0,r=i.length;e<r;e++)Ze(i[e],t,n,a)}function $e(e,t,n,a){const r=e.opaque;const i=e.transmissive;const o=e.transparent;S.setupLightsView(n);q===true&&Ae.setGlobalState(R.clippingPlanes,n);a&&fe.viewport(D.copy(a));r.length>0&&Je(r,t,n);i.length>0&&Je(i,t,n);o.length>0&&Je(o,t,n);fe.buffers.depth.setTest(true);fe.buffers.depth.setMask(true);fe.buffers.color.setMask(true);fe.setPolygonOffset(false)}function Qe(e,t,n,a){const i=n.isScene===true?n.overrideMaterial:null;if(i!==null)return;S.state.transmissionRenderTarget[a.id]===void 0&&(S.state.transmissionRenderTarget[a.id]=new te(1,1,{generateMipmaps:true,type:de.has("EXT_color_buffer_half_float")||de.has("EXT_color_buffer_float")?O:F,minFilter:Nt,samples:4,stencilBuffer:r,resolveDepthBuffer:false,resolveStencilBuffer:false,colorSpace:T.workingColorSpace}));const o=S.state.transmissionRenderTarget[a.id];const s=a.viewport||D;o.setSize(s.z*R.transmissionResolutionScale,s.w*R.transmissionResolutionScale);const l=R.getRenderTarget();R.setRenderTarget(o);R.getClearColor(N);B=R.getClearAlpha();B<1&&R.setClearColor(16777215,.5);R.clear();ie&&Ce.render(n);const c=R.toneMapping;R.toneMapping=Z;const d=a.viewport;a.viewport!==void 0&&(a.viewport=void 0);S.setupLightsView(a);q===true&&Ae.setGlobalState(R.clippingPlanes,a);Je(e,n,a);he.updateMultisampleRenderTarget(o);he.updateRenderTargetMipmap(o);if(de.has("WEBGL_multisampled_render_to_texture")===false){let e=false;for(let r=0,i=t.length;r<i;r++){const i=t[r];const o=i.object;const s=i.geometry;const l=i.material;const c=i.group;if(l.side===Ie&&o.layers.test(a.layers)){const t=l.side;l.side=E;l.needsUpdate=true;et(o,n,a,s,l,c);l.side=t;l.needsUpdate=true;e=true}}if(e===true){he.updateMultisampleRenderTarget(o);he.updateRenderTargetMipmap(o)}}R.setRenderTarget(l);R.setClearColor(N,B);d!==void 0&&(a.viewport=d);R.toneMapping=c}function Je(e,t,n){const a=t.isScene===true?t.overrideMaterial:null;for(let r=0,i=e.length;r<i;r++){const i=e[r];const o=i.object;const s=i.geometry;const l=i.group;let c=i.material;c.allowOverride===true&&a!==null&&(c=a);o.layers.test(n.layers)&&et(o,t,n,s,c,l)}}function et(e,t,n,a,r,i){e.onBeforeRender(R,t,n,a,r,i);e.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,e.matrixWorld);e.normalMatrix.getNormalMatrix(e.modelViewMatrix);r.onBeforeRender(R,t,n,a,e,i);if(r.transparent===true&&r.side===Ie&&r.forceSinglePass===false){r.side=E;r.needsUpdate=true;R.renderBufferDirect(n,t,a,r,e,i);r.side=L;r.needsUpdate=true;R.renderBufferDirect(n,t,a,r,e,i);r.side=Ie}else R.renderBufferDirect(n,t,a,r,e,i);e.onAfterRender(R,t,n,a,r,i)}function tt(e,t,n){t.isScene!==true&&(t=ae);const a=me.get(e);const r=S.state.lights;const i=S.state.shadowsArray;const o=r.state.version;const s=Te.getParameters(e,r.state,i,t,n);const l=Te.getProgramCacheKey(s);let c=a.programs;a.environment=e.isMeshStandardMaterial?t.environment:null;a.fog=t.fog;a.envMap=(e.isMeshStandardMaterial?ge:_e).get(e.envMap||a.environment);a.envMapRotation=a.environment!==null&&e.envMap===null?t.environmentRotation:e.envMapRotation;if(c===void 0){e.addEventListener("dispose",Ve);c=new Map;a.programs=c}let d=c.get(l);if(d!==void 0){if(a.currentProgram===d&&a.lightsStateVersion===o){at(e,s);return d}}else{s.uniforms=Te.getUniforms(e);e.onBeforeCompile(s,R);d=Te.acquireProgram(s,l);c.set(l,d);a.uniforms=s.uniforms}const u=a.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&e.clipping!==true||(u.clippingPlanes=Ae.uniform);at(e,s);a.needsLights=ot(e);a.lightsStateVersion=o;if(a.needsLights){u.ambientLightColor.value=r.state.ambient;u.lightProbe.value=r.state.probe;u.directionalLights.value=r.state.directional;u.directionalLightShadows.value=r.state.directionalShadow;u.spotLights.value=r.state.spot;u.spotLightShadows.value=r.state.spotShadow;u.rectAreaLights.value=r.state.rectArea;u.ltc_1.value=r.state.rectAreaLTC1;u.ltc_2.value=r.state.rectAreaLTC2;u.pointLights.value=r.state.point;u.pointLightShadows.value=r.state.pointShadow;u.hemisphereLights.value=r.state.hemi;u.directionalShadowMap.value=r.state.directionalShadowMap;u.directionalShadowMatrix.value=r.state.directionalShadowMatrix;u.spotShadowMap.value=r.state.spotShadowMap;u.spotLightMatrix.value=r.state.spotLightMatrix;u.spotLightMap.value=r.state.spotLightMap;u.pointShadowMap.value=r.state.pointShadowMap;u.pointShadowMatrix.value=r.state.pointShadowMatrix}a.currentProgram=d;a.uniformsList=null;return d}function nt(e){if(e.uniformsList===null){const t=e.currentProgram.getUniforms();e.uniformsList=WebGLUniforms.seqWithValue(t.seq,e.uniforms)}return e.uniformsList}function at(e,t){const n=me.get(e);n.outputColorSpace=t.outputColorSpace;n.batching=t.batching;n.batchingColor=t.batchingColor;n.instancing=t.instancing;n.instancingColor=t.instancingColor;n.instancingMorph=t.instancingMorph;n.skinning=t.skinning;n.morphTargets=t.morphTargets;n.morphNormals=t.morphNormals;n.morphColors=t.morphColors;n.morphTargetsCount=t.morphTargetsCount;n.numClippingPlanes=t.numClippingPlanes;n.numIntersection=t.numClipIntersection;n.vertexAlphas=t.vertexAlphas;n.vertexTangents=t.vertexTangents;n.toneMapping=t.toneMapping}function rt(e,t,n,a,r){t.isScene!==true&&(t=ae);he.resetTextureUnits();const i=t.fog;const o=a.isMeshStandardMaterial?t.environment:null;const s=P===null?R.outputColorSpace:P.isXRRenderTarget===true?P.texture.colorSpace:Y;const l=(a.isMeshStandardMaterial?ge:_e).get(a.envMap||o);const c=a.vertexColors===true&&!!n.attributes.color&&n.attributes.color.itemSize===4;const d=!!n.attributes.tangent&&(!!a.normalMap||a.anisotropy>0);const u=!!n.morphAttributes.position;const f=!!n.morphAttributes.normal;const p=!!n.morphAttributes.color;let m=Z;a.toneMapped&&(P!==null&&P.isXRRenderTarget!==true||(m=R.toneMapping));const h=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color;const _=h!==void 0?h.length:0;const g=me.get(a);const v=S.state.lights;if(q===true&&($===true||e!==w)){const t=e===w&&a.id===U;Ae.setState(a,e,t)}let E=false;if(a.version===g.__version)g.needsLights&&g.lightsStateVersion!==v.state.version||g.outputColorSpace!==s||r.isBatchedMesh&&g.batching===false?E=true:r.isBatchedMesh||g.batching!==true?r.isBatchedMesh&&g.batchingColor===true&&r.colorTexture===null||r.isBatchedMesh&&g.batchingColor===false&&r.colorTexture!==null||r.isInstancedMesh&&g.instancing===false?E=true:r.isInstancedMesh||g.instancing!==true?r.isSkinnedMesh&&g.skinning===false?E=true:r.isSkinnedMesh||g.skinning!==true?r.isInstancedMesh&&g.instancingColor===true&&r.instanceColor===null||r.isInstancedMesh&&g.instancingColor===false&&r.instanceColor!==null||r.isInstancedMesh&&g.instancingMorph===true&&r.morphTexture===null||r.isInstancedMesh&&g.instancingMorph===false&&r.morphTexture!==null||g.envMap!==l||a.fog===true&&g.fog!==i?E=true:g.numClippingPlanes===void 0||g.numClippingPlanes===Ae.numPlanes&&g.numIntersection===Ae.numIntersection?(g.vertexAlphas!==c||g.vertexTangents!==d||g.morphTargets!==u||g.morphNormals!==f||g.morphColors!==p||g.toneMapping!==m||g.morphTargetsCount!==_)&&(E=true):E=true:E=true:E=true:E=true;else{E=true;g.__version=a.version}let T=g.currentProgram;E===true&&(T=tt(a,t,r));let M=false;let x=false;let A=false;const b=T.getUniforms(),C=g.uniforms;if(fe.useProgram(T.program)){M=true;x=true;A=true}if(a.id!==U){U=a.id;x=true}if(M||w!==e){const t=fe.buffers.depth.getReversed();if(t){Q.copy(e.projectionMatrix);Qn(Q);Jn(Q);b.setValue(se,"projectionMatrix",Q)}else b.setValue(se,"projectionMatrix",e.projectionMatrix);b.setValue(se,"viewMatrix",e.matrixWorldInverse);const n=b.map.cameraPosition;n!==void 0&&n.setValue(se,ee.setFromMatrixPosition(e.matrixWorld));ue.logarithmicDepthBuffer&&b.setValue(se,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2));(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial)&&b.setValue(se,"isOrthographic",e.isOrthographicCamera===true);if(w!==e){w=e;x=true;A=true}}if(r.isSkinnedMesh){b.setOptional(se,r,"bindMatrix");b.setOptional(se,r,"bindMatrixInverse");const e=r.skeleton;if(e){e.boneTexture===null&&e.computeBoneTexture();b.setValue(se,"boneTexture",e.boneTexture,he)}}if(r.isBatchedMesh){b.setOptional(se,r,"batchingTexture");b.setValue(se,"batchingTexture",r._matricesTexture,he);b.setOptional(se,r,"batchingIdTexture");b.setValue(se,"batchingIdTexture",r._indirectTexture,he);b.setOptional(se,r,"batchingColorTexture");r._colorsTexture!==null&&b.setValue(se,"batchingColorTexture",r._colorsTexture,he)}const L=n.morphAttributes;L.position===void 0&&L.normal===void 0&&L.color===void 0||Le.update(r,n,T);if(x||g.receiveShadow!==r.receiveShadow){g.receiveShadow=r.receiveShadow;b.setValue(se,"receiveShadow",r.receiveShadow)}if(a.isMeshGouraudMaterial&&a.envMap!==null){C.envMap.value=l;C.flipEnvMap.value=l.isCubeTexture&&l.isRenderTargetTexture===false?-1:1}a.isMeshStandardMaterial&&a.envMap===null&&t.environment!==null&&(C.envMapIntensity.value=t.environmentIntensity);if(x){b.setValue(se,"toneMappingExposure",R.toneMappingExposure);g.needsLights&&it(C,A);i&&a.fog===true&&Me.refreshFogUniforms(C,i);Me.refreshMaterialUniforms(C,a,V,G,S.state.transmissionRenderTarget[e.id]);WebGLUniforms.upload(se,nt(g),C,he)}if(a.isShaderMaterial&&a.uniformsNeedUpdate===true){WebGLUniforms.upload(se,nt(g),C,he);a.uniformsNeedUpdate=false}a.isSpriteMaterial&&b.setValue(se,"center",r.center);b.setValue(se,"modelViewMatrix",r.modelViewMatrix);b.setValue(se,"normalMatrix",r.normalMatrix);b.setValue(se,"modelMatrix",r.matrixWorld);if(a.isShaderMaterial||a.isRawShaderMaterial){const e=a.uniformsGroups;for(let t=0,n=e.length;t<n;t++){const n=e[t];ye.update(n,T);ye.bind(n,T)}}return T}function it(e,t){e.ambientLightColor.needsUpdate=t;e.lightProbe.needsUpdate=t;e.directionalLights.needsUpdate=t;e.directionalLightShadows.needsUpdate=t;e.pointLights.needsUpdate=t;e.pointLightShadows.needsUpdate=t;e.spotLights.needsUpdate=t;e.spotLightShadows.needsUpdate=t;e.rectAreaLights.needsUpdate=t;e.hemisphereLights.needsUpdate=t}function ot(e){return e.isMeshLambertMaterial||e.isMeshToonMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&e.lights===true}this.getActiveCubeFace=function(){return b};this.getActiveMipmapLevel=function(){return C};this.getRenderTarget=function(){return P};this.setRenderTargetTextures=function(e,t,n){const a=me.get(e);a.__autoAllocateDepthBuffer=e.resolveDepthBuffer===false;a.__autoAllocateDepthBuffer===false&&(a.__useRenderToTexture=false);me.get(e.texture).__webglTexture=t;me.get(e.depthTexture).__webglTexture=a.__autoAllocateDepthBuffer?void 0:n;a.__hasExternalTextures=true};this.setRenderTargetFramebuffer=function(e,t){const n=me.get(e);n.__webglFramebuffer=t;n.__useDefaultFramebuffer=t===void 0};const st=se.createFramebuffer();
/**
		 * Sets the active rendertarget.
		 *
		 * @param {?WebGLRenderTarget} renderTarget - The render target to set. When `null` is given,
		 * the canvas is set as the active render target instead.
		 * @param {number} [activeCubeFace=0] - The active cube face when using a cube render target.
		 * Indicates the z layer to render in to when using 3D or array render targets.
		 * @param {number} [activeMipmapLevel=0] - The active mipmap level.
		 */this.setRenderTarget=function(e,t=0,n=0){P=e;b=t;C=n;let a=true;let r=null;let i=false;let o=false;if(e){const s=me.get(e);if(s.__useDefaultFramebuffer!==void 0){fe.bindFramebuffer(se.FRAMEBUFFER,null);a=false}else if(s.__webglFramebuffer===void 0)he.setupRenderTarget(e);else if(s.__hasExternalTextures)he.rebindTextures(e,me.get(e.texture).__webglTexture,me.get(e.depthTexture).__webglTexture);else if(e.depthBuffer){const t=e.depthTexture;if(s.__boundDepthTexture!==t){if(t!==null&&me.has(t)&&(e.width!==t.image.width||e.height!==t.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");he.setupDepthRenderbuffer(e)}}const l=e.texture;(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture)&&(o=true);const c=me.get(e).__webglFramebuffer;if(e.isWebGLCubeRenderTarget){r=Array.isArray(c[t])?c[t][n]:c[t];i=true}else r=e.samples>0&&he.useMultisampledRTT(e)===false?me.get(e).__webglMultisampledFramebuffer:Array.isArray(c)?c[n]:c;D.copy(e.viewport);y.copy(e.scissor);I=e.scissorTest}else{D.copy(W).multiplyScalar(V).floor();y.copy(X).multiplyScalar(V).floor();I=K}n!==0&&(r=st);const s=fe.bindFramebuffer(se.FRAMEBUFFER,r);s&&a&&fe.drawBuffers(e,r);fe.viewport(D);fe.scissor(y);fe.setScissorTest(I);if(i){const a=me.get(e.texture);se.framebufferTexture2D(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_CUBE_MAP_POSITIVE_X+t,a.__webglTexture,n)}else if(o){const a=me.get(e.texture);const r=t;se.framebufferTextureLayer(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,a.__webglTexture,n,r)}else if(e!==null&&n!==0){const t=me.get(e.texture);se.framebufferTexture2D(se.FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,t.__webglTexture,n)}U=-1};
/**
		 * Reads the pixel data from the given render target into the given buffer.
		 *
		 * @param {WebGLRenderTarget} renderTarget - The render target to read from.
		 * @param {number} x - The `x` coordinate of the copy region's origin.
		 * @param {number} y - The `y` coordinate of the copy region's origin.
		 * @param {number} width - The width of the copy region.
		 * @param {number} height - The height of the copy region.
		 * @param {TypedArray} buffer - The result buffer.
		 * @param {number} [activeCubeFaceIndex] - The active cube face index.
		 */this.readRenderTargetPixels=function(e,t,n,a,r,i,o){if(!(e&&e.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let s=me.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget&&o!==void 0&&(s=s[o]);if(s){fe.bindFramebuffer(se.FRAMEBUFFER,s);try{const o=e.texture;const s=o.format;const l=o.type;if(!ue.textureFormatReadable(s)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ue.textureTypeReadable(l)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}t>=0&&t<=e.width-a&&n>=0&&n<=e.height-r&&se.readPixels(t,n,a,r,we.convert(s),we.convert(l),i)}finally{const e=P!==null?me.get(P).__webglFramebuffer:null;fe.bindFramebuffer(se.FRAMEBUFFER,e)}}};
/**
		 * Asynchronous, non-blocking version of {@link WebGLRenderer#readRenderTargetPixels}.
		 *
		 * It is recommended to use this version of `readRenderTargetPixels()` whenever possible.
		 *
		 * @async
		 * @param {WebGLRenderTarget} renderTarget - The render target to read from.
		 * @param {number} x - The `x` coordinate of the copy region's origin.
		 * @param {number} y - The `y` coordinate of the copy region's origin.
		 * @param {number} width - The width of the copy region.
		 * @param {number} height - The height of the copy region.
		 * @param {TypedArray} buffer - The result buffer.
		 * @param {number} [activeCubeFaceIndex] - The active cube face index.
		 * @return {Promise<TypedArray>} A Promise that resolves when the read has been finished. The resolve provides the read data as a typed array.
		 */this.readRenderTargetPixelsAsync=async function(e,t,n,a,r,i,o){if(!(e&&e.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let s=me.get(e).__webglFramebuffer;e.isWebGLCubeRenderTarget&&o!==void 0&&(s=s[o]);if(s){if(t>=0&&t<=e.width-a&&n>=0&&n<=e.height-r){fe.bindFramebuffer(se.FRAMEBUFFER,s);const o=e.texture;const l=o.format;const c=o.type;if(!ue.textureFormatReadable(l))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ue.textureTypeReadable(c))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");const d=se.createBuffer();se.bindBuffer(se.PIXEL_PACK_BUFFER,d);se.bufferData(se.PIXEL_PACK_BUFFER,i.byteLength,se.STREAM_READ);se.readPixels(t,n,a,r,we.convert(l),we.convert(c),0);const u=P!==null?me.get(P).__webglFramebuffer:null;fe.bindFramebuffer(se.FRAMEBUFFER,u);const f=se.fenceSync(se.SYNC_GPU_COMMANDS_COMPLETE,0);se.flush();await ta(se,f,4);se.bindBuffer(se.PIXEL_PACK_BUFFER,d);se.getBufferSubData(se.PIXEL_PACK_BUFFER,0,i);se.deleteBuffer(d);se.deleteSync(f);return i}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}};
/**
		 * Copies pixels from the current bound framebuffer into the given texture.
		 *
		 * @param {FramebufferTexture} texture - The texture.
		 * @param {?Vector2} [position=null] - The start position of the copy operation.
		 * @param {number} [level=0] - The mip level. The default represents the base mip.
		 */this.copyFramebufferToTexture=function(e,t=null,n=0){const a=Math.pow(2,-n);const r=Math.floor(e.image.width*a);const i=Math.floor(e.image.height*a);const o=t!==null?t.x:0;const s=t!==null?t.y:0;he.setTexture2D(e,0);se.copyTexSubImage2D(se.TEXTURE_2D,n,0,0,o,s,r,i);fe.unbindTexture()};const lt=se.createFramebuffer();const ct=se.createFramebuffer();
/**
		 * Copies data of the given source texture into a destination texture.
		 *
		 * When using render target textures as `srcTexture` and `dstTexture`, you must make sure both render targets are initialized
		 * {@link WebGLRenderer#initRenderTarget}.
		 *
		 * @param {Texture} srcTexture - The source texture.
		 * @param {Texture} dstTexture - The destination texture.
		 * @param {?(Box2|Box3)} [srcRegion=null] - A bounding box which describes the source region. Can be two or three-dimensional.
		 * @param {?(Vector2|Vector3)} [dstPosition=null] - A vector that represents the origin of the destination region. Can be two or three-dimensional.
		 * @param {number} [srcLevel=0] - The source mipmap level to copy.
		 * @param {?number} [dstLevel=null] - The destination mipmap level.
		 */this.copyTextureToTexture=function(e,t,n=null,a=null,r=0,i=null){if(i===null)if(r!==0){re("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");i=r;r=0}else i=0;let o,s,l,c,d,u;let f,p,m;const h=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n!==null){o=n.max.x-n.min.x;s=n.max.y-n.min.y;l=n.isBox3?n.max.z-n.min.z:1;c=n.min.x;d=n.min.y;u=n.isBox3?n.min.z:0}else{const t=Math.pow(2,-r);o=Math.floor(h.width*t);s=Math.floor(h.height*t);l=e.isDataArrayTexture?h.depth:e.isData3DTexture?Math.floor(h.depth*t):1;c=0;d=0;u=0}if(a!==null){f=a.x;p=a.y;m=a.z}else{f=0;p=0;m=0}const _=we.convert(t.format);const g=we.convert(t.type);let v;if(t.isData3DTexture){he.setTexture3D(t,0);v=se.TEXTURE_3D}else if(t.isDataArrayTexture||t.isCompressedArrayTexture){he.setTexture2DArray(t,0);v=se.TEXTURE_2D_ARRAY}else{he.setTexture2D(t,0);v=se.TEXTURE_2D}se.pixelStorei(se.UNPACK_FLIP_Y_WEBGL,t.flipY);se.pixelStorei(se.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha);se.pixelStorei(se.UNPACK_ALIGNMENT,t.unpackAlignment);const E=se.getParameter(se.UNPACK_ROW_LENGTH);const S=se.getParameter(se.UNPACK_IMAGE_HEIGHT);const T=se.getParameter(se.UNPACK_SKIP_PIXELS);const M=se.getParameter(se.UNPACK_SKIP_ROWS);const x=se.getParameter(se.UNPACK_SKIP_IMAGES);se.pixelStorei(se.UNPACK_ROW_LENGTH,h.width);se.pixelStorei(se.UNPACK_IMAGE_HEIGHT,h.height);se.pixelStorei(se.UNPACK_SKIP_PIXELS,c);se.pixelStorei(se.UNPACK_SKIP_ROWS,d);se.pixelStorei(se.UNPACK_SKIP_IMAGES,u);const R=e.isDataArrayTexture||e.isData3DTexture;const A=t.isDataArrayTexture||t.isData3DTexture;if(e.isDepthTexture){const n=me.get(e);const a=me.get(t);const h=me.get(n.__renderTarget);const _=me.get(a.__renderTarget);fe.bindFramebuffer(se.READ_FRAMEBUFFER,h.__webglFramebuffer);fe.bindFramebuffer(se.DRAW_FRAMEBUFFER,_.__webglFramebuffer);for(let n=0;n<l;n++){if(R){se.framebufferTextureLayer(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,me.get(e).__webglTexture,r,u+n);se.framebufferTextureLayer(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,me.get(t).__webglTexture,i,m+n)}se.blitFramebuffer(c,d,o,s,f,p,o,s,se.DEPTH_BUFFER_BIT,se.NEAREST)}fe.bindFramebuffer(se.READ_FRAMEBUFFER,null);fe.bindFramebuffer(se.DRAW_FRAMEBUFFER,null)}else if(r!==0||e.isRenderTargetTexture||me.has(e)){const n=me.get(e);const a=me.get(t);fe.bindFramebuffer(se.READ_FRAMEBUFFER,lt);fe.bindFramebuffer(se.DRAW_FRAMEBUFFER,ct);for(let e=0;e<l;e++){R?se.framebufferTextureLayer(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,n.__webglTexture,r,u+e):se.framebufferTexture2D(se.READ_FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,n.__webglTexture,r);A?se.framebufferTextureLayer(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,a.__webglTexture,i,m+e):se.framebufferTexture2D(se.DRAW_FRAMEBUFFER,se.COLOR_ATTACHMENT0,se.TEXTURE_2D,a.__webglTexture,i);r!==0?se.blitFramebuffer(c,d,o,s,f,p,o,s,se.COLOR_BUFFER_BIT,se.NEAREST):A?se.copyTexSubImage3D(v,i,f,p,m+e,c,d,o,s):se.copyTexSubImage2D(v,i,f,p,c,d,o,s)}fe.bindFramebuffer(se.READ_FRAMEBUFFER,null);fe.bindFramebuffer(se.DRAW_FRAMEBUFFER,null)}else A?e.isDataTexture||e.isData3DTexture?se.texSubImage3D(v,i,f,p,m,o,s,l,_,g,h.data):t.isCompressedArrayTexture?se.compressedTexSubImage3D(v,i,f,p,m,o,s,l,_,h.data):se.texSubImage3D(v,i,f,p,m,o,s,l,_,g,h):e.isDataTexture?se.texSubImage2D(se.TEXTURE_2D,i,f,p,o,s,_,g,h.data):e.isCompressedTexture?se.compressedTexSubImage2D(se.TEXTURE_2D,i,f,p,h.width,h.height,_,h.data):se.texSubImage2D(se.TEXTURE_2D,i,f,p,o,s,_,g,h);se.pixelStorei(se.UNPACK_ROW_LENGTH,E);se.pixelStorei(se.UNPACK_IMAGE_HEIGHT,S);se.pixelStorei(se.UNPACK_SKIP_PIXELS,T);se.pixelStorei(se.UNPACK_SKIP_ROWS,M);se.pixelStorei(se.UNPACK_SKIP_IMAGES,x);i===0&&t.generateMipmaps&&se.generateMipmap(v);fe.unbindTexture()};this.copyTextureToTexture3D=function(e,t,n=null,a=null,r=0){re('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');return this.copyTextureToTexture(e,t,n,a,r)};
/**
		 * Initializes the given WebGLRenderTarget memory. Useful for initializing a render target so data
		 * can be copied into it using {@link WebGLRenderer#copyTextureToTexture} before it has been
		 * rendered to.
		 *
		 * @param {WebGLRenderTarget} target - The render target.
		 */this.initRenderTarget=function(e){me.get(e).__webglFramebuffer===void 0&&he.setupRenderTarget(e)};
/**
		 * Initializes the given texture. Useful for preloading a texture rather than waiting until first
		 * render (which can cause noticeable lags due to decode and GPU upload overhead).
		 *
		 * @param {Texture} texture - The texture.
		 */this.initTexture=function(e){e.isCubeTexture?he.setTextureCube(e,0):e.isData3DTexture?he.setTexture3D(e,0):e.isDataArrayTexture||e.isCompressedArrayTexture?he.setTexture2DArray(e,0):he.setTexture2D(e,0);fe.unbindTexture()};this.resetState=function(){b=0;C=0;P=null;fe.reset();De.reset()};typeof __THREE_DEVTOOLS__!=="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}
/**
	 * Defines the coordinate system of the renderer.
	 *
	 * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
	 *
	 * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
	 * @default WebGLCoordinateSystem
	 * @readonly
	 */get coordinateSystem(){return na}
/**
	 * Defines the output color space of the renderer.
	 *
	 * @type {SRGBColorSpace|LinearSRGBColorSpace}
	 * @default SRGBColorSpace
	 */get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=T._getDrawingBufferColorSpace(e);t.unpackColorSpace=T._getUnpackColorSpace()}}export{Me as ACESFilmicToneMapping,tt as AddEquation,Pe as AddOperation,At as AdditiveBlending,Te as AgXToneMapping,nn as AlphaFormat,Wt as AlwaysCompare,Ze as AlwaysDepth,Yn as ArrayCamera,E as BackSide,_ as BoxGeometry,J as BufferAttribute,Q as BufferGeometry,Jt as ByteType,xe as CineonToneMapping,yt as ClampToEdgeWrapping,o as Color,T as ColorManagement,it as ConstantAlphaFactor,st as ConstantColorFactor,V as CubeReflectionMapping,k as CubeRefractionMapping,_e as CubeTexture,u as CubeUVReflectionMapping,Qe as CullFaceBack,Ct as CullFaceFront,bt as CullFaceNone,Mt as CustomBlending,Ee as CustomToneMapping,he as Data3DTexture,ue as DataArrayTexture,qt as DepthFormat,Kt as DepthStencilFormat,me as DepthTexture,Ie as DoubleSide,ht as DstAlphaFactor,_t as DstColorFactor,zt as EqualCompare,Ke as EqualDepth,G as EquirectangularReflectionMapping,z as EquirectangularRefractionMapping,c as Euler,Xn as EventDispatcher,B as FloatType,L as FrontSide,He as Frustum,De as GLSL3,Gt as GreaterCompare,je as GreaterDepth,Vt as GreaterEqualCompare,We as GreaterEqualDepth,O as HalfFloatType,w as IntType,ye as Layers,kt as LessCompare,qe as LessDepth,ge as LessEqualCompare,Xe as LessEqualDepth,K as LinearFilter,Nt as LinearMipmapLinearFilter,Ot as LinearMipmapNearestFilter,Y as LinearSRGBColorSpace,Ae as LinearToneMapping,ve as LinearTransfer,n as Matrix3,d as Matrix4,at as MaxEquation,p as Mesh,$ as MeshBasicMaterial,Ge as MeshDepthMaterial,ze as MeshDistanceMaterial,nt as MinEquation,Dt as MirroredRepeatWrapping,Ue as MixOperation,xt as MultiplyBlending,we as MultiplyOperation,ke as NearestFilter,Ft as NearestMipmapLinearFilter,Bt as NearestMipmapNearestFilter,Se as NeutralToneMapping,Xt as NeverCompare,$e as NeverDepth,ne as NoBlending,Yt as NoColorSpace,Z as NoToneMapping,Ne as NormalBlending,Ht as NotEqualCompare,Ye as NotEqualDepth,Fe as ObjectSpaceNormalMap,St as OneFactor,rt as OneMinusConstantAlphaFactor,ot as OneMinusConstantColorFactor,lt as OneMinusDstAlphaFactor,ut as OneMinusDstColorFactor,pt as OneMinusSrcAlphaFactor,mt as OneMinusSrcColorFactor,X as OrthographicCamera,be as PCFShadowMap,Ce as PCFSoftShadowMap,PMREMGenerator,j as PerspectiveCamera,H as Plane,C as PlaneGeometry,kn as RED_GREEN_RGTC2_Format,Vn as RED_RGTC1_Format,$n as REVISION,Ve as RGBADepthPacking,N as RGBAFormat,un as RGBAIntegerFormat,Nn as RGBA_ASTC_10x10_Format,Dn as RGBA_ASTC_10x5_Format,yn as RGBA_ASTC_10x6_Format,In as RGBA_ASTC_10x8_Format,On as RGBA_ASTC_12x10_Format,Fn as RGBA_ASTC_12x12_Format,Rn as RGBA_ASTC_4x4_Format,An as RGBA_ASTC_5x4_Format,bn as RGBA_ASTC_5x5_Format,Cn as RGBA_ASTC_6x5_Format,Ln as RGBA_ASTC_6x6_Format,Pn as RGBA_ASTC_8x5_Format,Un as RGBA_ASTC_8x6_Format,wn as RGBA_ASTC_8x8_Format,Bn as RGBA_BPTC_Format,xn as RGBA_ETC2_EAC_Format,Sn as RGBA_PVRTC_2BPPV1_Format,En as RGBA_PVRTC_4BPPV1_Format,mn as RGBA_S3TC_DXT1_Format,hn as RGBA_S3TC_DXT3_Format,_n as RGBA_S3TC_DXT5_Format,an as RGBFormat,Hn as RGB_BPTC_SIGNED_Format,Gn as RGB_BPTC_UNSIGNED_Format,Tn as RGB_ETC1_Format,Mn as RGB_ETC2_Format,vn as RGB_PVRTC_2BPPV1_Format,gn as RGB_PVRTC_4BPPV1_Format,pn as RGB_S3TC_DXT1_Format,sn as RGFormat,ln as RGIntegerFormat,rn as RedFormat,on as RedIntegerFormat,Re as ReinhardToneMapping,It as RepeatWrapping,Je as ReverseSubtractEquation,Wn as SIGNED_RED_GREEN_RGTC2_Format,zn as SIGNED_RED_RGTC1_Format,Zn as SRGBColorSpace,b as SRGBTransfer,qi as ShaderChunk,$i as ShaderLib,g as ShaderMaterial,tn as ShortType,vt as SrcAlphaFactor,gt as SrcAlphaSaturateFactor,Et as SrcColorFactor,et as SubtractEquation,Rt as SubtractiveBlending,Oe as TangentSpaceNormalMap,pe as Texture,oe as Uint16BufferAttribute,ie as Uint32BufferAttribute,Zi as UniformsLib,Be as UniformsUtils,F as UnsignedByteType,Ut as UnsignedInt248Type,Qt as UnsignedInt5999Type,Pt as UnsignedIntType,Zt as UnsignedShort4444Type,$t as UnsignedShort5551Type,wt as UnsignedShortType,Le as VSMShadowMap,a as Vector2,l as Vector3,le as Vector4,na as WebGLCoordinateSystem,W as WebGLCubeRenderTarget,te as WebGLRenderTarget,WebGLRenderer,Wl as WebGLUtils,Kn as WebXRController,Tt as ZeroFactor,qn as createCanvasElement};

